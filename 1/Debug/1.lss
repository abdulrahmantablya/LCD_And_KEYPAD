
1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000030ca  0000313e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002154  00000000  00000000  00003148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a11  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000099a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <main>
      7a:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_WritePin>:
 */

#include "DIO.h"

void DIO_WritePin (uint8 PinNum, uint8 PinValue)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_WritePin+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PINA0) && (PinNum <= PINA7))
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	88 30       	cpi	r24, 0x08	; 8
     b48:	80 f5       	brcc	.+96     	; 0xbaa <DIO_WritePin+0x74>
	{
		if (PinValue == LOW)
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 23       	and	r24, r24
     b4e:	a9 f4       	brne	.+42     	; 0xb7a <DIO_WritePin+0x44>
		{
			ClrBit(PORTA,PinNum);
     b50:	ab e3       	ldi	r26, 0x3B	; 59
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	eb e3       	ldi	r30, 0x3B	; 59
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	48 2f       	mov	r20, r24
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 2e       	mov	r0, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_WritePin+0x38>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_WritePin+0x34>
     b72:	80 95       	com	r24
     b74:	84 23       	and	r24, r20
     b76:	8c 93       	st	X, r24
     b78:	ca c0       	rjmp	.+404    	; 0xd0e <DIO_WritePin+0x1d8>
		}
		else if (PinValue == HIGH)
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <DIO_WritePin+0x4c>
     b80:	c6 c0       	rjmp	.+396    	; 0xd0e <DIO_WritePin+0x1d8>
		{
			SetBit(PORTA,PinNum);
     b82:	ab e3       	ldi	r26, 0x3B	; 59
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	eb e3       	ldi	r30, 0x3B	; 59
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	48 2f       	mov	r20, r24
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 2e       	mov	r0, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_WritePin+0x6a>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_WritePin+0x66>
     ba4:	84 2b       	or	r24, r20
     ba6:	8c 93       	st	X, r24
     ba8:	b2 c0       	rjmp	.+356    	; 0xd0e <DIO_WritePin+0x1d8>
		else
		{
			//#error "Please enter number 0 or 1"
		}	
	}
	else if ((PinNum >= PINB0) && (PinNum <= PINB7))
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	88 30       	cpi	r24, 0x08	; 8
     bae:	c8 f1       	brcs	.+114    	; 0xc22 <DIO_WritePin+0xec>
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 31       	cpi	r24, 0x10	; 16
     bb4:	b0 f5       	brcc	.+108    	; 0xc22 <DIO_WritePin+0xec>
	{
		if (PinValue == LOW)
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	88 23       	and	r24, r24
     bba:	c1 f4       	brne	.+48     	; 0xbec <DIO_WritePin+0xb6>
		{
			ClrBit(PORTB,(PinNum-8));
     bbc:	a8 e3       	ldi	r26, 0x38	; 56
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e8 e3       	ldi	r30, 0x38	; 56
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9c 01       	movw	r18, r24
     bd0:	28 50       	subi	r18, 0x08	; 8
     bd2:	30 40       	sbci	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_WritePin+0xaa>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_WritePin+0xa6>
     be4:	80 95       	com	r24
     be6:	84 23       	and	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	91 c0       	rjmp	.+290    	; 0xd0e <DIO_WritePin+0x1d8>
		}
		else if (PinValue == HIGH)
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <DIO_WritePin+0xbe>
     bf2:	8d c0       	rjmp	.+282    	; 0xd0e <DIO_WritePin+0x1d8>
		{
			SetBit(PORTB,(PinNum-8));
     bf4:	a8 e3       	ldi	r26, 0x38	; 56
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 e3       	ldi	r30, 0x38	; 56
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9c 01       	movw	r18, r24
     c08:	28 50       	subi	r18, 0x08	; 8
     c0a:	30 40       	sbci	r19, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 2e       	mov	r0, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_WritePin+0xe2>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_WritePin+0xde>
     c1c:	84 2b       	or	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	76 c0       	rjmp	.+236    	; 0xd0e <DIO_WritePin+0x1d8>
		else
		{
			//#error "Please enter 0 or 1"
		}
	}
	else if ((PinNum >= PINC0) && (PinNum <= PINC7))
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	80 31       	cpi	r24, 0x10	; 16
     c26:	c8 f1       	brcs	.+114    	; 0xc9a <DIO_WritePin+0x164>
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	88 31       	cpi	r24, 0x18	; 24
     c2c:	b0 f5       	brcc	.+108    	; 0xc9a <DIO_WritePin+0x164>
	{
		if (PinValue == LOW)
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	88 23       	and	r24, r24
     c32:	c1 f4       	brne	.+48     	; 0xc64 <DIO_WritePin+0x12e>
		{
			ClrBit(PORTC,(PinNum-16));
     c34:	a5 e3       	ldi	r26, 0x35	; 53
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e5 e3       	ldi	r30, 0x35	; 53
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9c 01       	movw	r18, r24
     c48:	20 51       	subi	r18, 0x10	; 16
     c4a:	30 40       	sbci	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_WritePin+0x122>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_WritePin+0x11e>
     c5c:	80 95       	com	r24
     c5e:	84 23       	and	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	55 c0       	rjmp	.+170    	; 0xd0e <DIO_WritePin+0x1d8>
		}
		else if (PinValue == HIGH)
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	09 f0       	breq	.+2      	; 0xc6c <DIO_WritePin+0x136>
     c6a:	51 c0       	rjmp	.+162    	; 0xd0e <DIO_WritePin+0x1d8>
		{
			SetBit(PORTC,(PinNum-16));
     c6c:	a5 e3       	ldi	r26, 0x35	; 53
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e5 e3       	ldi	r30, 0x35	; 53
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	48 2f       	mov	r20, r24
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	9c 01       	movw	r18, r24
     c80:	20 51       	subi	r18, 0x10	; 16
     c82:	30 40       	sbci	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_WritePin+0x15a>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_WritePin+0x156>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	3a c0       	rjmp	.+116    	; 0xd0e <DIO_WritePin+0x1d8>
		else
		{
			//#error "Please enter 0 or 1"
		}
	}
	else if ((PinNum >= PIND0) && (PinNum <= PIND7))
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 31       	cpi	r24, 0x18	; 24
     c9e:	b8 f1       	brcs	.+110    	; 0xd0e <DIO_WritePin+0x1d8>
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	80 32       	cpi	r24, 0x20	; 32
     ca4:	a0 f5       	brcc	.+104    	; 0xd0e <DIO_WritePin+0x1d8>
	{
		if (PinValue == LOW)
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	88 23       	and	r24, r24
     caa:	c1 f4       	brne	.+48     	; 0xcdc <DIO_WritePin+0x1a6>
		{
			ClrBit(PORTD,(PinNum-24));
     cac:	a2 e3       	ldi	r26, 0x32	; 50
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e2 e3       	ldi	r30, 0x32	; 50
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c 01       	movw	r18, r24
     cc0:	28 51       	subi	r18, 0x18	; 24
     cc2:	30 40       	sbci	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_WritePin+0x19a>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_WritePin+0x196>
     cd4:	80 95       	com	r24
     cd6:	84 23       	and	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	19 c0       	rjmp	.+50     	; 0xd0e <DIO_WritePin+0x1d8>
		}
		else if (PinValue == HIGH)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	b1 f4       	brne	.+44     	; 0xd0e <DIO_WritePin+0x1d8>
		{
			SetBit(PORTD,(PinNum-24));
     ce2:	a2 e3       	ldi	r26, 0x32	; 50
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e2 e3       	ldi	r30, 0x32	; 50
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9c 01       	movw	r18, r24
     cf6:	28 51       	subi	r18, 0x18	; 24
     cf8:	30 40       	sbci	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_WritePin+0x1d0>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_WritePin+0x1cc>
     d0a:	84 2b       	or	r24, r20
     d0c:	8c 93       	st	X, r24
	}
	else
	{
		//#error "Please enter number between 0 and 31"
	}
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <DIO_ReadPin>:

uint8 DIO_ReadPin (uint8 PinNum)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <DIO_ReadPin+0x6>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOW;
     d24:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum >= PINA0) && (PinNum <= PINA7))
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	90 f4       	brcc	.+36     	; 0xd50 <DIO_ReadPin+0x38>
	{
		value = GetBit(PINA,PinNum);
     d2c:	e9 e3       	ldi	r30, 0x39	; 57
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_ReadPin+0x2e>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_ReadPin+0x2a>
     d4a:	84 23       	and	r24, r20
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	50 c0       	rjmp	.+160    	; 0xdf0 <DIO_ReadPin+0xd8>
	}
	else if ((PinNum >= PINB0) && (PinNum <= PINB7))
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	88 30       	cpi	r24, 0x08	; 8
     d54:	c0 f0       	brcs	.+48     	; 0xd86 <DIO_ReadPin+0x6e>
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	80 31       	cpi	r24, 0x10	; 16
     d5a:	a8 f4       	brcc	.+42     	; 0xd86 <DIO_ReadPin+0x6e>
	{
		value = GetBit(PINB,(PinNum-8));
     d5c:	e6 e3       	ldi	r30, 0x36	; 54
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9c 01       	movw	r18, r24
     d6c:	28 50       	subi	r18, 0x08	; 8
     d6e:	30 40       	sbci	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_ReadPin+0x64>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_ReadPin+0x60>
     d80:	84 23       	and	r24, r20
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	35 c0       	rjmp	.+106    	; 0xdf0 <DIO_ReadPin+0xd8>
	}
	else if ((PinNum >= PINC0) && (PinNum <= PINC7))
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	80 31       	cpi	r24, 0x10	; 16
     d8a:	c0 f0       	brcs	.+48     	; 0xdbc <DIO_ReadPin+0xa4>
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	88 31       	cpi	r24, 0x18	; 24
     d90:	a8 f4       	brcc	.+42     	; 0xdbc <DIO_ReadPin+0xa4>
	{
		value = GetBit(PINC,(PinNum-16));
     d92:	e3 e3       	ldi	r30, 0x33	; 51
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 01       	movw	r18, r24
     da2:	20 51       	subi	r18, 0x10	; 16
     da4:	30 40       	sbci	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_ReadPin+0x9a>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_ReadPin+0x96>
     db6:	84 23       	and	r24, r20
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	1a c0       	rjmp	.+52     	; 0xdf0 <DIO_ReadPin+0xd8>
	}
	else if ((PinNum >= PIND0) && (PinNum <= PIND7))
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	88 31       	cpi	r24, 0x18	; 24
     dc0:	b8 f0       	brcs	.+46     	; 0xdf0 <DIO_ReadPin+0xd8>
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	80 32       	cpi	r24, 0x20	; 32
     dc6:	a0 f4       	brcc	.+40     	; 0xdf0 <DIO_ReadPin+0xd8>
	{
		value = GetBit(PIND,(PinNum-24));
     dc8:	e0 e3       	ldi	r30, 0x30	; 48
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 01       	movw	r18, r24
     dd8:	28 51       	subi	r18, 0x18	; 24
     dda:	30 40       	sbci	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_ReadPin+0xd0>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_ReadPin+0xcc>
     dec:	84 23       	and	r24, r20
     dee:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//#error "Please enter number between 0 and 31"
	}
	if(value != LOW)
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 23       	and	r24, r24
     df4:	11 f0       	breq	.+4      	; 0xdfa <DIO_ReadPin+0xe2>
	{
		value = HIGH;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <DIO_SetPinDirection>:

void DIO_SetPinDirection (uint8 PinNum,uint8 PinDirection)
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <DIO_SetPinDirection+0x6>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PINA0) && (PinNum <= PINA7))
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	88 30       	cpi	r24, 0x08	; 8
     e18:	80 f5       	brcc	.+96     	; 0xe7a <DIO_SetPinDirection+0x74>
	{
		if (PinDirection == LOW)
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	88 23       	and	r24, r24
     e1e:	a9 f4       	brne	.+42     	; 0xe4a <DIO_SetPinDirection+0x44>
		{
			ClrBit(DDRA,PinNum);
     e20:	aa e3       	ldi	r26, 0x3A	; 58
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_SetPinDirection+0x38>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_SetPinDirection+0x34>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	ca c0       	rjmp	.+404    	; 0xfde <DIO_SetPinDirection+0x1d8>
		}
		else if (PinDirection == HIGH)
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <DIO_SetPinDirection+0x4c>
     e50:	c6 c0       	rjmp	.+396    	; 0xfde <DIO_SetPinDirection+0x1d8>
		{
			SetBit(DDRA,PinNum);
     e52:	aa e3       	ldi	r26, 0x3A	; 58
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e3       	ldi	r30, 0x3A	; 58
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_SetPinDirection+0x6a>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_SetPinDirection+0x66>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	b2 c0       	rjmp	.+356    	; 0xfde <DIO_SetPinDirection+0x1d8>
		else
		{
			//#error "Please enter number 0 or 1"
		}
	}
	else if ((PinNum >= PINB0) && (PinNum <= PINB7))
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	88 30       	cpi	r24, 0x08	; 8
     e7e:	c8 f1       	brcs	.+114    	; 0xef2 <DIO_SetPinDirection+0xec>
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 31       	cpi	r24, 0x10	; 16
     e84:	b0 f5       	brcc	.+108    	; 0xef2 <DIO_SetPinDirection+0xec>
	{
		if (PinDirection == LOW)
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	88 23       	and	r24, r24
     e8a:	c1 f4       	brne	.+48     	; 0xebc <DIO_SetPinDirection+0xb6>
		{
			ClrBit(DDRB,(PinNum-8));
     e8c:	a7 e3       	ldi	r26, 0x37	; 55
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e7 e3       	ldi	r30, 0x37	; 55
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	28 50       	subi	r18, 0x08	; 8
     ea2:	30 40       	sbci	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_SetPinDirection+0xaa>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_SetPinDirection+0xa6>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	91 c0       	rjmp	.+290    	; 0xfde <DIO_SetPinDirection+0x1d8>
		}
		else if (PinDirection == HIGH)
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <DIO_SetPinDirection+0xbe>
     ec2:	8d c0       	rjmp	.+282    	; 0xfde <DIO_SetPinDirection+0x1d8>
		{
			SetBit(DDRB,(PinNum-8));
     ec4:	a7 e3       	ldi	r26, 0x37	; 55
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e3       	ldi	r30, 0x37	; 55
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9c 01       	movw	r18, r24
     ed8:	28 50       	subi	r18, 0x08	; 8
     eda:	30 40       	sbci	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_SetPinDirection+0xe2>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_SetPinDirection+0xde>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	76 c0       	rjmp	.+236    	; 0xfde <DIO_SetPinDirection+0x1d8>
		else
		{
			//#error "Please enter number 0 or 1"
		}
	}
	else if ((PinNum >= PINC0) && (PinNum <= PINC7))
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	80 31       	cpi	r24, 0x10	; 16
     ef6:	c8 f1       	brcs	.+114    	; 0xf6a <DIO_SetPinDirection+0x164>
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	88 31       	cpi	r24, 0x18	; 24
     efc:	b0 f5       	brcc	.+108    	; 0xf6a <DIO_SetPinDirection+0x164>
	{
		if (PinDirection == LOW)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	88 23       	and	r24, r24
     f02:	c1 f4       	brne	.+48     	; 0xf34 <DIO_SetPinDirection+0x12e>
		{
			ClrBit(DDRC,(PinNum-16));
     f04:	a4 e3       	ldi	r26, 0x34	; 52
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e4 e3       	ldi	r30, 0x34	; 52
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 01       	movw	r18, r24
     f18:	20 51       	subi	r18, 0x10	; 16
     f1a:	30 40       	sbci	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_SetPinDirection+0x122>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_SetPinDirection+0x11e>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	55 c0       	rjmp	.+170    	; 0xfde <DIO_SetPinDirection+0x1d8>
		}
		else if (PinDirection == HIGH)
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	09 f0       	breq	.+2      	; 0xf3c <DIO_SetPinDirection+0x136>
     f3a:	51 c0       	rjmp	.+162    	; 0xfde <DIO_SetPinDirection+0x1d8>
		{
			SetBit(DDRC,(PinNum-16));
     f3c:	a4 e3       	ldi	r26, 0x34	; 52
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9c 01       	movw	r18, r24
     f50:	20 51       	subi	r18, 0x10	; 16
     f52:	30 40       	sbci	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_SetPinDirection+0x15a>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_SetPinDirection+0x156>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	3a c0       	rjmp	.+116    	; 0xfde <DIO_SetPinDirection+0x1d8>
		else
		{
			//#error "Please enter number 0 or 1"
		}
	}
	else if ((PinNum >= PIND0) && (PinNum <= PIND7))
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	88 31       	cpi	r24, 0x18	; 24
     f6e:	b8 f1       	brcs	.+110    	; 0xfde <DIO_SetPinDirection+0x1d8>
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 32       	cpi	r24, 0x20	; 32
     f74:	a0 f5       	brcc	.+104    	; 0xfde <DIO_SetPinDirection+0x1d8>
	{
		if (PinDirection == LOW)
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	88 23       	and	r24, r24
     f7a:	c1 f4       	brne	.+48     	; 0xfac <DIO_SetPinDirection+0x1a6>
		{
			ClrBit(DDRD,(PinNum-24));
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9c 01       	movw	r18, r24
     f90:	28 51       	subi	r18, 0x18	; 24
     f92:	30 40       	sbci	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_SetPinDirection+0x19a>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_SetPinDirection+0x196>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	19 c0       	rjmp	.+50     	; 0xfde <DIO_SetPinDirection+0x1d8>
		}
		else if (PinDirection == HIGH)
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	b1 f4       	brne	.+44     	; 0xfde <DIO_SetPinDirection+0x1d8>
		{
			SetBit(DDRD,(PinNum-24));
     fb2:	a1 e3       	ldi	r26, 0x31	; 49
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e3       	ldi	r30, 0x31	; 49
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 01       	movw	r18, r24
     fc6:	28 51       	subi	r18, 0x18	; 24
     fc8:	30 40       	sbci	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinDirection+0x1d0>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinDirection+0x1cc>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
	}
	else
	{
		//#error "Please enter number between 0 and 31"
	}
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <LCD_Intialization>:
#include "LCD.h"

#include "util/delay.h"

void LCD_Intialization (void)
{
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	c2 56       	subi	r28, 0x62	; 98
     ff6:	d0 40       	sbci	r29, 0x00	; 0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(E_LCD,OUTPUT);
    1002:	83 e0       	ldi	r24, 0x03	; 3
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>
	DIO_SetPinDirection(RS_LCD,OUTPUT);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>
	DIO_SetPinDirection(RW_LCD,OUTPUT);
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>

	DIO_SetPinDirection(LCD_D4,OUTPUT);
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5,OUTPUT);
    1022:	85 e0       	ldi	r24, 0x05	; 5
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6,OUTPUT);
    102a:	86 e0       	ldi	r24, 0x06	; 6
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7,OUTPUT);
    1032:	87 e0       	ldi	r24, 0x07	; 7
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	0e 94 03 07 	call	0xe06	; 0xe06 <DIO_SetPinDirection>
    103a:	fe 01       	movw	r30, r28
    103c:	e1 5a       	subi	r30, 0xA1	; 161
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	ac e0       	ldi	r26, 0x0C	; 12
    1046:	b2 e4       	ldi	r27, 0x42	; 66
    1048:	80 83       	st	Z, r24
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	a2 83       	std	Z+2, r26	; 0x02
    104e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1050:	8e 01       	movw	r16, r28
    1052:	05 5a       	subi	r16, 0xA5	; 165
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	fe 01       	movw	r30, r28
    1058:	e1 5a       	subi	r30, 0xA1	; 161
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	4a ef       	ldi	r20, 0xFA	; 250
    106a:	54 e4       	ldi	r21, 0x44	; 68
    106c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	f8 01       	movw	r30, r16
    1076:	80 83       	st	Z, r24
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	a2 83       	std	Z+2, r26	; 0x02
    107c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    107e:	fe 01       	movw	r30, r28
    1080:	e5 5a       	subi	r30, 0xA5	; 165
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1098:	88 23       	and	r24, r24
    109a:	44 f4       	brge	.+16     	; 0x10ac <LCD_Intialization+0xc4>
		__ticks = 1;
    109c:	fe 01       	movw	r30, r28
    109e:	e7 5a       	subi	r30, 0xA7	; 167
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
    10aa:	64 c0       	rjmp	.+200    	; 0x1174 <LCD_Intialization+0x18c>
	else if (__tmp > 65535)
    10ac:	fe 01       	movw	r30, r28
    10ae:	e5 5a       	subi	r30, 0xA5	; 165
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	3f ef       	ldi	r19, 0xFF	; 255
    10be:	4f e7       	ldi	r20, 0x7F	; 127
    10c0:	57 e4       	ldi	r21, 0x47	; 71
    10c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10c6:	18 16       	cp	r1, r24
    10c8:	0c f0       	brlt	.+2      	; 0x10cc <LCD_Intialization+0xe4>
    10ca:	43 c0       	rjmp	.+134    	; 0x1152 <LCD_Intialization+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10cc:	fe 01       	movw	r30, r28
    10ce:	e1 5a       	subi	r30, 0xA1	; 161
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8e 01       	movw	r16, r28
    10ec:	07 5a       	subi	r16, 0xA7	; 167
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	1f c0       	rjmp	.+62     	; 0x1142 <LCD_Intialization+0x15a>
    1104:	fe 01       	movw	r30, r28
    1106:	e9 5a       	subi	r30, 0xA9	; 169
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	88 ec       	ldi	r24, 0xC8	; 200
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1112:	fe 01       	movw	r30, r28
    1114:	e9 5a       	subi	r30, 0xA9	; 169
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <LCD_Intialization+0x134>
    1120:	fe 01       	movw	r30, r28
    1122:	e9 5a       	subi	r30, 0xA9	; 169
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112a:	de 01       	movw	r26, r28
    112c:	a7 5a       	subi	r26, 0xA7	; 167
    112e:	bf 4f       	sbci	r27, 0xFF	; 255
    1130:	fe 01       	movw	r30, r28
    1132:	e7 5a       	subi	r30, 0xA7	; 167
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	80 81       	ld	r24, Z
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	11 96       	adiw	r26, 0x01	; 1
    113e:	9c 93       	st	X, r25
    1140:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	fe 01       	movw	r30, r28
    1144:	e7 5a       	subi	r30, 0xA7	; 167
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	d1 f6       	brne	.-76     	; 0x1104 <LCD_Intialization+0x11c>
    1150:	27 c0       	rjmp	.+78     	; 0x11a0 <LCD_Intialization+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1152:	8e 01       	movw	r16, r28
    1154:	07 5a       	subi	r16, 0xA7	; 167
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	e5 5a       	subi	r30, 0xA5	; 165
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	f8 01       	movw	r30, r16
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
    1174:	de 01       	movw	r26, r28
    1176:	ab 5a       	subi	r26, 0xAB	; 171
    1178:	bf 4f       	sbci	r27, 0xFF	; 255
    117a:	fe 01       	movw	r30, r28
    117c:	e7 5a       	subi	r30, 0xA7	; 167
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	8d 93       	st	X+, r24
    1186:	9c 93       	st	X, r25
    1188:	fe 01       	movw	r30, r28
    118a:	eb 5a       	subi	r30, 0xAB	; 171
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LCD_Intialization+0x1aa>
    1196:	fe 01       	movw	r30, r28
    1198:	eb 5a       	subi	r30, 0xAB	; 171
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24

	_delay_ms(35);

	LCD_Command(lcd_4_bits_initialization_2);
    11a0:	83 e3       	ldi	r24, 0x33	; 51
    11a2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    11a6:	fe 01       	movw	r30, r28
    11a8:	ef 5a       	subi	r30, 0xAF	; 175
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e4       	ldi	r27, 0x40	; 64
    11b4:	80 83       	st	Z, r24
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	a2 83       	std	Z+2, r26	; 0x02
    11ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11bc:	8e 01       	movw	r16, r28
    11be:	03 5b       	subi	r16, 0xB3	; 179
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	fe 01       	movw	r30, r28
    11c4:	ef 5a       	subi	r30, 0xAF	; 175
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	4a ef       	ldi	r20, 0xFA	; 250
    11d6:	54 e4       	ldi	r21, 0x44	; 68
    11d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	f8 01       	movw	r30, r16
    11e2:	80 83       	st	Z, r24
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	a2 83       	std	Z+2, r26	; 0x02
    11e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11ea:	fe 01       	movw	r30, r28
    11ec:	e3 5b       	subi	r30, 0xB3	; 179
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	60 81       	ld	r22, Z
    11f2:	71 81       	ldd	r23, Z+1	; 0x01
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	93 81       	ldd	r25, Z+3	; 0x03
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	44 f4       	brge	.+16     	; 0x1218 <LCD_Intialization+0x230>
		__ticks = 1;
    1208:	fe 01       	movw	r30, r28
    120a:	e5 5b       	subi	r30, 0xB5	; 181
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
    1216:	64 c0       	rjmp	.+200    	; 0x12e0 <LCD_Intialization+0x2f8>
	else if (__tmp > 65535)
    1218:	fe 01       	movw	r30, r28
    121a:	e3 5b       	subi	r30, 0xB3	; 179
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	3f ef       	ldi	r19, 0xFF	; 255
    122a:	4f e7       	ldi	r20, 0x7F	; 127
    122c:	57 e4       	ldi	r21, 0x47	; 71
    122e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1232:	18 16       	cp	r1, r24
    1234:	0c f0       	brlt	.+2      	; 0x1238 <LCD_Intialization+0x250>
    1236:	43 c0       	rjmp	.+134    	; 0x12be <LCD_Intialization+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1238:	fe 01       	movw	r30, r28
    123a:	ef 5a       	subi	r30, 0xAF	; 175
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	8e 01       	movw	r16, r28
    1258:	05 5b       	subi	r16, 0xB5	; 181
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	f8 01       	movw	r30, r16
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	1f c0       	rjmp	.+62     	; 0x12ae <LCD_Intialization+0x2c6>
    1270:	fe 01       	movw	r30, r28
    1272:	e7 5b       	subi	r30, 0xB7	; 183
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	88 ec       	ldi	r24, 0xC8	; 200
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
    127e:	fe 01       	movw	r30, r28
    1280:	e7 5b       	subi	r30, 0xB7	; 183
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <LCD_Intialization+0x2a0>
    128c:	fe 01       	movw	r30, r28
    128e:	e7 5b       	subi	r30, 0xB7	; 183
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1296:	de 01       	movw	r26, r28
    1298:	a5 5b       	subi	r26, 0xB5	; 181
    129a:	bf 4f       	sbci	r27, 0xFF	; 255
    129c:	fe 01       	movw	r30, r28
    129e:	e5 5b       	subi	r30, 0xB5	; 181
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	9c 93       	st	X, r25
    12ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	fe 01       	movw	r30, r28
    12b0:	e5 5b       	subi	r30, 0xB5	; 181
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	d1 f6       	brne	.-76     	; 0x1270 <LCD_Intialization+0x288>
    12bc:	27 c0       	rjmp	.+78     	; 0x130c <LCD_Intialization+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12be:	8e 01       	movw	r16, r28
    12c0:	05 5b       	subi	r16, 0xB5	; 181
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	fe 01       	movw	r30, r28
    12c6:	e3 5b       	subi	r30, 0xB3	; 179
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	f8 01       	movw	r30, r16
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
    12e0:	de 01       	movw	r26, r28
    12e2:	a9 5b       	subi	r26, 0xB9	; 185
    12e4:	bf 4f       	sbci	r27, 0xFF	; 255
    12e6:	fe 01       	movw	r30, r28
    12e8:	e5 5b       	subi	r30, 0xB5	; 181
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	8d 93       	st	X+, r24
    12f2:	9c 93       	st	X, r25
    12f4:	fe 01       	movw	r30, r28
    12f6:	e9 5b       	subi	r30, 0xB9	; 185
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_Intialization+0x316>
    1302:	fe 01       	movw	r30, r28
    1304:	e9 5b       	subi	r30, 0xB9	; 185
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_Command(lcd_4_bits_initialization_1);
    130c:	82 e3       	ldi	r24, 0x32	; 50
    130e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    1312:	fe 01       	movw	r30, r28
    1314:	ed 5b       	subi	r30, 0xBD	; 189
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e4       	ldi	r27, 0x40	; 64
    1320:	80 83       	st	Z, r24
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	a2 83       	std	Z+2, r26	; 0x02
    1326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	8e 01       	movw	r16, r28
    132a:	01 5c       	subi	r16, 0xC1	; 193
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	ed 5b       	subi	r30, 0xBD	; 189
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a ef       	ldi	r20, 0xFA	; 250
    1342:	54 e4       	ldi	r21, 0x44	; 68
    1344:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	f8 01       	movw	r30, r16
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1356:	fe 01       	movw	r30, r28
    1358:	ff 96       	adiw	r30, 0x3f	; 63
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    136e:	88 23       	and	r24, r24
    1370:	2c f4       	brge	.+10     	; 0x137c <LCD_Intialization+0x394>
		__ticks = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9e af       	std	Y+62, r25	; 0x3e
    1378:	8d af       	std	Y+61, r24	; 0x3d
    137a:	46 c0       	rjmp	.+140    	; 0x1408 <LCD_Intialization+0x420>
	else if (__tmp > 65535)
    137c:	fe 01       	movw	r30, r28
    137e:	ff 96       	adiw	r30, 0x3f	; 63
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1394:	18 16       	cp	r1, r24
    1396:	64 f5       	brge	.+88     	; 0x13f0 <LCD_Intialization+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	fe 01       	movw	r30, r28
    139a:	ed 5b       	subi	r30, 0xBD	; 189
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e af       	std	Y+62, r25	; 0x3e
    13c4:	8d af       	std	Y+61, r24	; 0x3d
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <LCD_Intialization+0x3fe>
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c af       	std	Y+60, r25	; 0x3c
    13ce:	8b af       	std	Y+59, r24	; 0x3b
    13d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    13d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <LCD_Intialization+0x3ec>
    13d8:	9c af       	std	Y+60, r25	; 0x3c
    13da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    13de:	9e ad       	ldd	r25, Y+62	; 0x3e
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	9e af       	std	Y+62, r25	; 0x3e
    13e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f7       	brne	.-38     	; 0x13c8 <LCD_Intialization+0x3e0>
    13ee:	16 c0       	rjmp	.+44     	; 0x141c <LCD_Intialization+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	fe 01       	movw	r30, r28
    13f2:	ff 96       	adiw	r30, 0x3f	; 63
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9e af       	std	Y+62, r25	; 0x3e
    1406:	8d af       	std	Y+61, r24	; 0x3d
    1408:	8d ad       	ldd	r24, Y+61	; 0x3d
    140a:	9e ad       	ldd	r25, Y+62	; 0x3e
    140c:	9a af       	std	Y+58, r25	; 0x3a
    140e:	89 af       	std	Y+57, r24	; 0x39
    1410:	89 ad       	ldd	r24, Y+57	; 0x39
    1412:	9a ad       	ldd	r25, Y+58	; 0x3a
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <LCD_Intialization+0x42c>
    1418:	9a af       	std	Y+58, r25	; 0x3a
    141a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	LCD_Command(lcd_2_lines_4_bits);
    141c:	88 e2       	ldi	r24, 0x28	; 40
    141e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e4       	ldi	r27, 0x40	; 64
    142a:	8d ab       	std	Y+53, r24	; 0x35
    142c:	9e ab       	std	Y+54, r25	; 0x36
    142e:	af ab       	std	Y+55, r26	; 0x37
    1430:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	6d a9       	ldd	r22, Y+53	; 0x35
    1434:	7e a9       	ldd	r23, Y+54	; 0x36
    1436:	8f a9       	ldd	r24, Y+55	; 0x37
    1438:	98 ad       	ldd	r25, Y+56	; 0x38
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	89 ab       	std	Y+49, r24	; 0x31
    144c:	9a ab       	std	Y+50, r25	; 0x32
    144e:	ab ab       	std	Y+51, r26	; 0x33
    1450:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1452:	69 a9       	ldd	r22, Y+49	; 0x31
    1454:	7a a9       	ldd	r23, Y+50	; 0x32
    1456:	8b a9       	ldd	r24, Y+51	; 0x33
    1458:	9c a9       	ldd	r25, Y+52	; 0x34
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <LCD_Intialization+0x48c>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	98 ab       	std	Y+48, r25	; 0x30
    1470:	8f a7       	std	Y+47, r24	; 0x2f
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <LCD_Intialization+0x50a>
	else if (__tmp > 65535)
    1474:	69 a9       	ldd	r22, Y+49	; 0x31
    1476:	7a a9       	ldd	r23, Y+50	; 0x32
    1478:	8b a9       	ldd	r24, Y+51	; 0x33
    147a:	9c a9       	ldd	r25, Y+52	; 0x34
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <LCD_Intialization+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6d a9       	ldd	r22, Y+53	; 0x35
    148e:	7e a9       	ldd	r23, Y+54	; 0x36
    1490:	8f a9       	ldd	r24, Y+55	; 0x37
    1492:	98 ad       	ldd	r25, Y+56	; 0x38
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	98 ab       	std	Y+48, r25	; 0x30
    14b2:	8f a7       	std	Y+47, r24	; 0x2f
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <LCD_Intialization+0x4ec>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9e a7       	std	Y+46, r25	; 0x2e
    14bc:	8d a7       	std	Y+45, r24	; 0x2d
    14be:	8d a5       	ldd	r24, Y+45	; 0x2d
    14c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <LCD_Intialization+0x4da>
    14c6:	9e a7       	std	Y+46, r25	; 0x2e
    14c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    14cc:	98 a9       	ldd	r25, Y+48	; 0x30
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	98 ab       	std	Y+48, r25	; 0x30
    14d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d6:	98 a9       	ldd	r25, Y+48	; 0x30
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <LCD_Intialization+0x4ce>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <LCD_Intialization+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	69 a9       	ldd	r22, Y+49	; 0x31
    14e0:	7a a9       	ldd	r23, Y+50	; 0x32
    14e2:	8b a9       	ldd	r24, Y+51	; 0x33
    14e4:	9c a9       	ldd	r25, Y+52	; 0x34
    14e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f4:	98 a9       	ldd	r25, Y+48	; 0x30
    14f6:	9c a7       	std	Y+44, r25	; 0x2c
    14f8:	8b a7       	std	Y+43, r24	; 0x2b
    14fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_Intialization+0x516>
    1502:	9c a7       	std	Y+44, r25	; 0x2c
    1504:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_Command(lcd_displayon_cursor_off);
    1506:	8c e0       	ldi	r24, 0x0C	; 12
    1508:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a0 e0       	ldi	r26, 0x00	; 0
    1512:	b0 e4       	ldi	r27, 0x40	; 64
    1514:	8f a3       	std	Y+39, r24	; 0x27
    1516:	98 a7       	std	Y+40, r25	; 0x28
    1518:	a9 a7       	std	Y+41, r26	; 0x29
    151a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151c:	6f a1       	ldd	r22, Y+39	; 0x27
    151e:	78 a5       	ldd	r23, Y+40	; 0x28
    1520:	89 a5       	ldd	r24, Y+41	; 0x29
    1522:	9a a5       	ldd	r25, Y+42	; 0x2a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4a ef       	ldi	r20, 0xFA	; 250
    152a:	54 e4       	ldi	r21, 0x44	; 68
    152c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	8b a3       	std	Y+35, r24	; 0x23
    1536:	9c a3       	std	Y+36, r25	; 0x24
    1538:	ad a3       	std	Y+37, r26	; 0x25
    153a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    153c:	6b a1       	ldd	r22, Y+35	; 0x23
    153e:	7c a1       	ldd	r23, Y+36	; 0x24
    1540:	8d a1       	ldd	r24, Y+37	; 0x25
    1542:	9e a1       	ldd	r25, Y+38	; 0x26
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1550:	88 23       	and	r24, r24
    1552:	2c f4       	brge	.+10     	; 0x155e <LCD_Intialization+0x576>
		__ticks = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
    155c:	3f c0       	rjmp	.+126    	; 0x15dc <LCD_Intialization+0x5f4>
	else if (__tmp > 65535)
    155e:	6b a1       	ldd	r22, Y+35	; 0x23
    1560:	7c a1       	ldd	r23, Y+36	; 0x24
    1562:	8d a1       	ldd	r24, Y+37	; 0x25
    1564:	9e a1       	ldd	r25, Y+38	; 0x26
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1572:	18 16       	cp	r1, r24
    1574:	4c f5       	brge	.+82     	; 0x15c8 <LCD_Intialization+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1576:	6f a1       	ldd	r22, Y+39	; 0x27
    1578:	78 a5       	ldd	r23, Y+40	; 0x28
    157a:	89 a5       	ldd	r24, Y+41	; 0x29
    157c:	9a a5       	ldd	r25, Y+42	; 0x2a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9a a3       	std	Y+34, r25	; 0x22
    159c:	89 a3       	std	Y+33, r24	; 0x21
    159e:	0f c0       	rjmp	.+30     	; 0x15be <LCD_Intialization+0x5d6>
    15a0:	88 ec       	ldi	r24, 0xC8	; 200
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	98 a3       	std	Y+32, r25	; 0x20
    15a6:	8f 8f       	std	Y+31, r24	; 0x1f
    15a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15aa:	98 a1       	ldd	r25, Y+32	; 0x20
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <LCD_Intialization+0x5c4>
    15b0:	98 a3       	std	Y+32, r25	; 0x20
    15b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b4:	89 a1       	ldd	r24, Y+33	; 0x21
    15b6:	9a a1       	ldd	r25, Y+34	; 0x22
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	9a a3       	std	Y+34, r25	; 0x22
    15bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15be:	89 a1       	ldd	r24, Y+33	; 0x21
    15c0:	9a a1       	ldd	r25, Y+34	; 0x22
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	69 f7       	brne	.-38     	; 0x15a0 <LCD_Intialization+0x5b8>
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <LCD_Intialization+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ca:	7c a1       	ldd	r23, Y+36	; 0x24
    15cc:	8d a1       	ldd	r24, Y+37	; 0x25
    15ce:	9e a1       	ldd	r25, Y+38	; 0x26
    15d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9a a3       	std	Y+34, r25	; 0x22
    15da:	89 a3       	std	Y+33, r24	; 0x21
    15dc:	89 a1       	ldd	r24, Y+33	; 0x21
    15de:	9a a1       	ldd	r25, Y+34	; 0x22
    15e0:	9e 8f       	std	Y+30, r25	; 0x1e
    15e2:	8d 8f       	std	Y+29, r24	; 0x1d
    15e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCD_Intialization+0x600>
    15ec:	9e 8f       	std	Y+30, r25	; 0x1e
    15ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_Command(lcd_increment_cursor);
    15f0:	86 e0       	ldi	r24, 0x06	; 6
    15f2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e4       	ldi	r27, 0x40	; 64
    15fe:	89 8f       	std	Y+25, r24	; 0x19
    1600:	9a 8f       	std	Y+26, r25	; 0x1a
    1602:	ab 8f       	std	Y+27, r26	; 0x1b
    1604:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	69 8d       	ldd	r22, Y+25	; 0x19
    1608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a ef       	ldi	r20, 0xFA	; 250
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8d 8b       	std	Y+21, r24	; 0x15
    1620:	9e 8b       	std	Y+22, r25	; 0x16
    1622:	af 8b       	std	Y+23, r26	; 0x17
    1624:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1626:	6d 89       	ldd	r22, Y+21	; 0x15
    1628:	7e 89       	ldd	r23, Y+22	; 0x16
    162a:	8f 89       	ldd	r24, Y+23	; 0x17
    162c:	98 8d       	ldd	r25, Y+24	; 0x18
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <LCD_Intialization+0x660>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
    1646:	3f c0       	rjmp	.+126    	; 0x16c6 <LCD_Intialization+0x6de>
	else if (__tmp > 65535)
    1648:	6d 89       	ldd	r22, Y+21	; 0x15
    164a:	7e 89       	ldd	r23, Y+22	; 0x16
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	98 8d       	ldd	r25, Y+24	; 0x18
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	4c f5       	brge	.+82     	; 0x16b2 <LCD_Intialization+0x6ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <LCD_Intialization+0x6c0>
    168a:	88 ec       	ldi	r24, 0xC8	; 200
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	89 8b       	std	Y+17, r24	; 0x11
    1692:	89 89       	ldd	r24, Y+17	; 0x11
    1694:	9a 89       	ldd	r25, Y+18	; 0x12
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_Intialization+0x6ae>
    169a:	9a 8b       	std	Y+18, r25	; 0x12
    169c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	8b 89       	ldd	r24, Y+19	; 0x13
    16a0:	9c 89       	ldd	r25, Y+20	; 0x14
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	8b 89       	ldd	r24, Y+19	; 0x13
    16aa:	9c 89       	ldd	r25, Y+20	; 0x14
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <LCD_Intialization+0x6a2>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <LCD_Intialization+0x6f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	6d 89       	ldd	r22, Y+21	; 0x15
    16b4:	7e 89       	ldd	r23, Y+22	; 0x16
    16b6:	8f 89       	ldd	r24, Y+23	; 0x17
    16b8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9c 8b       	std	Y+20, r25	; 0x14
    16c4:	8b 8b       	std	Y+19, r24	; 0x13
    16c6:	8b 89       	ldd	r24, Y+19	; 0x13
    16c8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ca:	98 8b       	std	Y+16, r25	; 0x10
    16cc:	8f 87       	std	Y+15, r24	; 0x0f
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	98 89       	ldd	r25, Y+16	; 0x10
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_Intialization+0x6ea>
    16d6:	98 8b       	std	Y+16, r25	; 0x10
    16d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_Command(lcd_clear);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e7       	ldi	r26, 0x70	; 112
    16e6:	b1 e4       	ldi	r27, 0x41	; 65
    16e8:	8b 87       	std	Y+11, r24	; 0x0b
    16ea:	9c 87       	std	Y+12, r25	; 0x0c
    16ec:	ad 87       	std	Y+13, r26	; 0x0d
    16ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a ef       	ldi	r20, 0xFA	; 250
    16fe:	54 e4       	ldi	r21, 0x44	; 68
    1700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	8f 83       	std	Y+7, r24	; 0x07
    170a:	98 87       	std	Y+8, r25	; 0x08
    170c:	a9 87       	std	Y+9, r26	; 0x09
    170e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1710:	6f 81       	ldd	r22, Y+7	; 0x07
    1712:	78 85       	ldd	r23, Y+8	; 0x08
    1714:	89 85       	ldd	r24, Y+9	; 0x09
    1716:	9a 85       	ldd	r25, Y+10	; 0x0a
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <LCD_Intialization+0x74a>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <LCD_Intialization+0x7c8>
	else if (__tmp > 65535)
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	4c f5       	brge	.+82     	; 0x179c <LCD_Intialization+0x7b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174a:	6b 85       	ldd	r22, Y+11	; 0x0b
    174c:	7c 85       	ldd	r23, Y+12	; 0x0c
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <LCD_Intialization+0x7aa>
    1774:	88 ec       	ldi	r24, 0xC8	; 200
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_Intialization+0x798>
    1784:	9c 83       	std	Y+4, r25	; 0x04
    1786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	69 f7       	brne	.-38     	; 0x1774 <LCD_Intialization+0x78c>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <LCD_Intialization+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_Intialization+0x7d4>
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    17c4:	ce 59       	subi	r28, 0x9E	; 158
    17c6:	df 4f       	sbci	r29, 0xFF	; 255
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <LCD_Command>:


void LCD_Command (uint8 u8Commandcopy)
{
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	c1 57       	subi	r28, 0x71	; 113
    17ea:	d0 40       	sbci	r29, 0x00	; 0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	fe 01       	movw	r30, r28
    17f8:	ef 58       	subi	r30, 0x8F	; 143
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	80 83       	st	Z, r24
	DIO_WritePin(RS_LCD,LOW);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    1806:	fe 01       	movw	r30, r28
    1808:	e3 59       	subi	r30, 0x93	; 147
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e8       	ldi	r26, 0x80	; 128
    1812:	bf e3       	ldi	r27, 0x3F	; 63
    1814:	80 83       	st	Z, r24
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	a2 83       	std	Z+2, r26	; 0x02
    181a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	8e 01       	movw	r16, r28
    181e:	07 59       	subi	r16, 0x97	; 151
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	fe 01       	movw	r30, r28
    1824:	e3 59       	subi	r30, 0x93	; 147
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	f8 01       	movw	r30, r16
    1842:	80 83       	st	Z, r24
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	a2 83       	std	Z+2, r26	; 0x02
    1848:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    184a:	fe 01       	movw	r30, r28
    184c:	e7 59       	subi	r30, 0x97	; 151
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	44 f4       	brge	.+16     	; 0x1878 <LCD_Command+0x9c>
		__ticks = 1;
    1868:	fe 01       	movw	r30, r28
    186a:	e9 59       	subi	r30, 0x99	; 153
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
    1876:	64 c0       	rjmp	.+200    	; 0x1940 <LCD_Command+0x164>
	else if (__tmp > 65535)
    1878:	fe 01       	movw	r30, r28
    187a:	e7 59       	subi	r30, 0x97	; 151
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	0c f0       	brlt	.+2      	; 0x1898 <LCD_Command+0xbc>
    1896:	43 c0       	rjmp	.+134    	; 0x191e <LCD_Command+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	fe 01       	movw	r30, r28
    189a:	e3 59       	subi	r30, 0x93	; 147
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8e 01       	movw	r16, r28
    18b8:	09 59       	subi	r16, 0x99	; 153
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	f8 01       	movw	r30, r16
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	1f c0       	rjmp	.+62     	; 0x190e <LCD_Command+0x132>
    18d0:	fe 01       	movw	r30, r28
    18d2:	eb 59       	subi	r30, 0x9B	; 155
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	88 ec       	ldi	r24, 0xC8	; 200
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
    18de:	fe 01       	movw	r30, r28
    18e0:	eb 59       	subi	r30, 0x9B	; 155
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_Command+0x10c>
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 59       	subi	r30, 0x9B	; 155
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	de 01       	movw	r26, r28
    18f8:	a9 59       	subi	r26, 0x99	; 153
    18fa:	bf 4f       	sbci	r27, 0xFF	; 255
    18fc:	fe 01       	movw	r30, r28
    18fe:	e9 59       	subi	r30, 0x99	; 153
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	11 96       	adiw	r26, 0x01	; 1
    190a:	9c 93       	st	X, r25
    190c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	fe 01       	movw	r30, r28
    1910:	e9 59       	subi	r30, 0x99	; 153
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	d1 f6       	brne	.-76     	; 0x18d0 <LCD_Command+0xf4>
    191c:	27 c0       	rjmp	.+78     	; 0x196c <LCD_Command+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191e:	8e 01       	movw	r16, r28
    1920:	09 59       	subi	r16, 0x99	; 153
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	fe 01       	movw	r30, r28
    1926:	e7 59       	subi	r30, 0x97	; 151
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	de 01       	movw	r26, r28
    1942:	ad 59       	subi	r26, 0x9D	; 157
    1944:	bf 4f       	sbci	r27, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	e9 59       	subi	r30, 0x99	; 153
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	8d 93       	st	X+, r24
    1952:	9c 93       	st	X, r25
    1954:	fe 01       	movw	r30, r28
    1956:	ed 59       	subi	r30, 0x9D	; 157
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_Command+0x182>
    1962:	fe 01       	movw	r30, r28
    1964:	ed 59       	subi	r30, 0x9D	; 157
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_WritePin(E_LCD,HIGH);
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    1974:	fe 01       	movw	r30, r28
    1976:	e1 5a       	subi	r30, 0xA1	; 161
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e8       	ldi	r26, 0x80	; 128
    1980:	bf e3       	ldi	r27, 0x3F	; 63
    1982:	80 83       	st	Z, r24
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	a2 83       	std	Z+2, r26	; 0x02
    1988:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	8e 01       	movw	r16, r28
    198c:	05 5a       	subi	r16, 0xA5	; 165
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	fe 01       	movw	r30, r28
    1992:	e1 5a       	subi	r30, 0xA1	; 161
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a ef       	ldi	r20, 0xFA	; 250
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	f8 01       	movw	r30, r16
    19b0:	80 83       	st	Z, r24
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	a2 83       	std	Z+2, r26	; 0x02
    19b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b8:	fe 01       	movw	r30, r28
    19ba:	e5 5a       	subi	r30, 0xA5	; 165
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	44 f4       	brge	.+16     	; 0x19e6 <LCD_Command+0x20a>
		__ticks = 1;
    19d6:	fe 01       	movw	r30, r28
    19d8:	e7 5a       	subi	r30, 0xA7	; 167
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	64 c0       	rjmp	.+200    	; 0x1aae <LCD_Command+0x2d2>
	else if (__tmp > 65535)
    19e6:	fe 01       	movw	r30, r28
    19e8:	e5 5a       	subi	r30, 0xA5	; 165
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	0c f0       	brlt	.+2      	; 0x1a06 <LCD_Command+0x22a>
    1a04:	43 c0       	rjmp	.+134    	; 0x1a8c <LCD_Command+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	fe 01       	movw	r30, r28
    1a08:	e1 5a       	subi	r30, 0xA1	; 161
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8e 01       	movw	r16, r28
    1a26:	07 5a       	subi	r16, 0xA7	; 167
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	1f c0       	rjmp	.+62     	; 0x1a7c <LCD_Command+0x2a0>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e9 5a       	subi	r30, 0xA9	; 169
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e9 5a       	subi	r30, 0xA9	; 169
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_Command+0x27a>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e9 5a       	subi	r30, 0xA9	; 169
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	de 01       	movw	r26, r28
    1a66:	a7 5a       	subi	r26, 0xA7	; 167
    1a68:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e7 5a       	subi	r30, 0xA7	; 167
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	11 96       	adiw	r26, 0x01	; 1
    1a78:	9c 93       	st	X, r25
    1a7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e7 5a       	subi	r30, 0xA7	; 167
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	d1 f6       	brne	.-76     	; 0x1a3e <LCD_Command+0x262>
    1a8a:	27 c0       	rjmp	.+78     	; 0x1ada <LCD_Command+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	07 5a       	subi	r16, 0xA7	; 167
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	e5 5a       	subi	r30, 0xA5	; 165
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	de 01       	movw	r26, r28
    1ab0:	ab 5a       	subi	r26, 0xAB	; 171
    1ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e7 5a       	subi	r30, 0xA7	; 167
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	8d 93       	st	X+, r24
    1ac0:	9c 93       	st	X, r25
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	eb 5a       	subi	r30, 0xAB	; 171
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_Command+0x2f0>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	eb 5a       	subi	r30, 0xAB	; 171
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
	_delay_ms(1);

	PORT_LCD=(PORT_LCD & 0x0f)|(u8Commandcopy & 0xf0);
    1ada:	ab e3       	ldi	r26, 0x3B	; 59
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	eb e3       	ldi	r30, 0x3B	; 59
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	9f 70       	andi	r25, 0x0F	; 15
    1ae8:	fe 01       	movw	r30, r28
    1aea:	ef 58       	subi	r30, 0x8F	; 143
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	80 81       	ld	r24, Z
    1af0:	80 7f       	andi	r24, 0xF0	; 240
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
    1af6:	fe 01       	movw	r30, r28
    1af8:	ef 5a       	subi	r30, 0xAF	; 175
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	80 83       	st	Z, r24
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	a2 83       	std	Z+2, r26	; 0x02
    1b0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	8e 01       	movw	r16, r28
    1b0e:	03 5b       	subi	r16, 0xB3	; 179
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	ef 5a       	subi	r30, 0xAF	; 175
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	80 83       	st	Z, r24
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	a2 83       	std	Z+2, r26	; 0x02
    1b38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e3 5b       	subi	r30, 0xB3	; 179
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	44 f4       	brge	.+16     	; 0x1b68 <LCD_Command+0x38c>
		__ticks = 1;
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e5 5b       	subi	r30, 0xB5	; 181
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
    1b66:	64 c0       	rjmp	.+200    	; 0x1c30 <LCD_Command+0x454>
	else if (__tmp > 65535)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e3 5b       	subi	r30, 0xB3	; 179
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <LCD_Command+0x3ac>
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <LCD_Command+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ef 5a       	subi	r30, 0xAF	; 175
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8e 01       	movw	r16, r28
    1ba8:	05 5b       	subi	r16, 0xB5	; 181
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	80 83       	st	Z, r24
    1bbe:	1f c0       	rjmp	.+62     	; 0x1bfe <LCD_Command+0x422>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e7 5b       	subi	r30, 0xB7	; 183
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e7 5b       	subi	r30, 0xB7	; 183
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_Command+0x3fc>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e7 5b       	subi	r30, 0xB7	; 183
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	de 01       	movw	r26, r28
    1be8:	a5 5b       	subi	r26, 0xB5	; 181
    1bea:	bf 4f       	sbci	r27, 0xFF	; 255
    1bec:	fe 01       	movw	r30, r28
    1bee:	e5 5b       	subi	r30, 0xB5	; 181
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	9c 93       	st	X, r25
    1bfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e5 5b       	subi	r30, 0xB5	; 181
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	d1 f6       	brne	.-76     	; 0x1bc0 <LCD_Command+0x3e4>
    1c0c:	27 c0       	rjmp	.+78     	; 0x1c5c <LCD_Command+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	8e 01       	movw	r16, r28
    1c10:	05 5b       	subi	r16, 0xB5	; 181
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	fe 01       	movw	r30, r28
    1c16:	e3 5b       	subi	r30, 0xB3	; 179
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	de 01       	movw	r26, r28
    1c32:	a9 5b       	subi	r26, 0xB9	; 185
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	e5 5b       	subi	r30, 0xB5	; 181
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	8d 93       	st	X+, r24
    1c42:	9c 93       	st	X, r25
    1c44:	fe 01       	movw	r30, r28
    1c46:	e9 5b       	subi	r30, 0xB9	; 185
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_Command+0x472>
    1c52:	fe 01       	movw	r30, r28
    1c54:	e9 5b       	subi	r30, 0xB9	; 185
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_WritePin(E_LCD,LOW);
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    1c64:	fe 01       	movw	r30, r28
    1c66:	ed 5b       	subi	r30, 0xBD	; 189
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e8       	ldi	r26, 0x80	; 128
    1c70:	bf e3       	ldi	r27, 0x3F	; 63
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	01 5c       	subi	r16, 0xC1	; 193
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	ed 5b       	subi	r30, 0xBD	; 189
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a ef       	ldi	r20, 0xFA	; 250
    1c94:	54 e4       	ldi	r21, 0x44	; 68
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ff 96       	adiw	r30, 0x3f	; 63
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_Command+0x4f2>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9e af       	std	Y+62, r25	; 0x3e
    1cca:	8d af       	std	Y+61, r24	; 0x3d
    1ccc:	46 c0       	rjmp	.+140    	; 0x1d5a <LCD_Command+0x57e>
	else if (__tmp > 65535)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ff 96       	adiw	r30, 0x3f	; 63
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	64 f5       	brge	.+88     	; 0x1d42 <LCD_Command+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	fe 01       	movw	r30, r28
    1cec:	ed 5b       	subi	r30, 0xBD	; 189
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	51 e4       	ldi	r21, 0x41	; 65
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9e af       	std	Y+62, r25	; 0x3e
    1d16:	8d af       	std	Y+61, r24	; 0x3d
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <LCD_Command+0x55c>
    1d1a:	88 ec       	ldi	r24, 0xC8	; 200
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9c af       	std	Y+60, r25	; 0x3c
    1d20:	8b af       	std	Y+59, r24	; 0x3b
    1d22:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d24:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_Command+0x54a>
    1d2a:	9c af       	std	Y+60, r25	; 0x3c
    1d2c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	9e af       	std	Y+62, r25	; 0x3e
    1d36:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	69 f7       	brne	.-38     	; 0x1d1a <LCD_Command+0x53e>
    1d40:	16 c0       	rjmp	.+44     	; 0x1d6e <LCD_Command+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d42:	fe 01       	movw	r30, r28
    1d44:	ff 96       	adiw	r30, 0x3f	; 63
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9e af       	std	Y+62, r25	; 0x3e
    1d58:	8d af       	std	Y+61, r24	; 0x3d
    1d5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5e:	9a af       	std	Y+58, r25	; 0x3a
    1d60:	89 af       	std	Y+57, r24	; 0x39
    1d62:	89 ad       	ldd	r24, Y+57	; 0x39
    1d64:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_Command+0x58a>
    1d6a:	9a af       	std	Y+58, r25	; 0x3a
    1d6c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_WritePin(E_LCD,HIGH);
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e8       	ldi	r26, 0x80	; 128
    1d7c:	bf e3       	ldi	r27, 0x3F	; 63
    1d7e:	8d ab       	std	Y+53, r24	; 0x35
    1d80:	9e ab       	std	Y+54, r25	; 0x36
    1d82:	af ab       	std	Y+55, r26	; 0x37
    1d84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	6d a9       	ldd	r22, Y+53	; 0x35
    1d88:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	89 ab       	std	Y+49, r24	; 0x31
    1da0:	9a ab       	std	Y+50, r25	; 0x32
    1da2:	ab ab       	std	Y+51, r26	; 0x33
    1da4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da6:	69 a9       	ldd	r22, Y+49	; 0x31
    1da8:	7a a9       	ldd	r23, Y+50	; 0x32
    1daa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dac:	9c a9       	ldd	r25, Y+52	; 0x34
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <LCD_Command+0x5ec>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	98 ab       	std	Y+48, r25	; 0x30
    1dc4:	8f a7       	std	Y+47, r24	; 0x2f
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <LCD_Command+0x66a>
	else if (__tmp > 65535)
    1dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dca:	7a a9       	ldd	r23, Y+50	; 0x32
    1dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dce:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <LCD_Command+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	6d a9       	ldd	r22, Y+53	; 0x35
    1de2:	7e a9       	ldd	r23, Y+54	; 0x36
    1de4:	8f a9       	ldd	r24, Y+55	; 0x37
    1de6:	98 ad       	ldd	r25, Y+56	; 0x38
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	98 ab       	std	Y+48, r25	; 0x30
    1e06:	8f a7       	std	Y+47, r24	; 0x2f
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <LCD_Command+0x64c>
    1e0a:	88 ec       	ldi	r24, 0xC8	; 200
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9e a7       	std	Y+46, r25	; 0x2e
    1e10:	8d a7       	std	Y+45, r24	; 0x2d
    1e12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_Command+0x63a>
    1e1a:	9e a7       	std	Y+46, r25	; 0x2e
    1e1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	98 ab       	std	Y+48, r25	; 0x30
    1e26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <LCD_Command+0x62e>
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <LCD_Command+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	69 a9       	ldd	r22, Y+49	; 0x31
    1e34:	7a a9       	ldd	r23, Y+50	; 0x32
    1e36:	8b a9       	ldd	r24, Y+51	; 0x33
    1e38:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	98 ab       	std	Y+48, r25	; 0x30
    1e44:	8f a7       	std	Y+47, r24	; 0x2f
    1e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e48:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4a:	9c a7       	std	Y+44, r25	; 0x2c
    1e4c:	8b a7       	std	Y+43, r24	; 0x2b
    1e4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_Command+0x676>
    1e56:	9c a7       	std	Y+44, r25	; 0x2c
    1e58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);


	PORT_LCD=(PORT_LCD & 0x0f)|((u8Commandcopy & 0x0f) <<4 );
    1e5a:	ab e3       	ldi	r26, 0x3B	; 59
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	eb e3       	ldi	r30, 0x3B	; 59
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	28 2f       	mov	r18, r24
    1e66:	2f 70       	andi	r18, 0x0F	; 15
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ef 58       	subi	r30, 0x8F	; 143
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	82 95       	swap	r24
    1e76:	92 95       	swap	r25
    1e78:	90 7f       	andi	r25, 0xF0	; 240
    1e7a:	98 27       	eor	r25, r24
    1e7c:	80 7f       	andi	r24, 0xF0	; 240
    1e7e:	98 27       	eor	r25, r24
    1e80:	82 2b       	or	r24, r18
    1e82:	8c 93       	st	X, r24
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 e8       	ldi	r26, 0x80	; 128
    1e8a:	bf e3       	ldi	r27, 0x3F	; 63
    1e8c:	8f a3       	std	Y+39, r24	; 0x27
    1e8e:	98 a7       	std	Y+40, r25	; 0x28
    1e90:	a9 a7       	std	Y+41, r26	; 0x29
    1e92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6f a1       	ldd	r22, Y+39	; 0x27
    1e96:	78 a5       	ldd	r23, Y+40	; 0x28
    1e98:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8b a3       	std	Y+35, r24	; 0x23
    1eae:	9c a3       	std	Y+36, r25	; 0x24
    1eb0:	ad a3       	std	Y+37, r26	; 0x25
    1eb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <LCD_Command+0x6fa>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9a a3       	std	Y+34, r25	; 0x22
    1ed2:	89 a3       	std	Y+33, r24	; 0x21
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <LCD_Command+0x778>
	else if (__tmp > 65535)
    1ed6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eda:	8d a1       	ldd	r24, Y+37	; 0x25
    1edc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <LCD_Command+0x764>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9a a3       	std	Y+34, r25	; 0x22
    1f14:	89 a3       	std	Y+33, r24	; 0x21
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <LCD_Command+0x75a>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	98 a3       	std	Y+32, r25	; 0x20
    1f1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f22:	98 a1       	ldd	r25, Y+32	; 0x20
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_Command+0x748>
    1f28:	98 a3       	std	Y+32, r25	; 0x20
    1f2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <LCD_Command+0x73c>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <LCD_Command+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6b a1       	ldd	r22, Y+35	; 0x23
    1f42:	7c a1       	ldd	r23, Y+36	; 0x24
    1f44:	8d a1       	ldd	r24, Y+37	; 0x25
    1f46:	9e a1       	ldd	r25, Y+38	; 0x26
    1f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	9e 8f       	std	Y+30, r25	; 0x1e
    1f5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_Command+0x784>
    1f64:	9e 8f       	std	Y+30, r25	; 0x1e
    1f66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_WritePin(E_LCD,LOW);
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf e3       	ldi	r27, 0x3F	; 63
    1f78:	89 8f       	std	Y+25, r24	; 0x19
    1f7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8d 8b       	std	Y+21, r24	; 0x15
    1f9a:	9e 8b       	std	Y+22, r25	; 0x16
    1f9c:	af 8b       	std	Y+23, r26	; 0x17
    1f9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_Command+0x7e6>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_Command+0x864>
	else if (__tmp > 65535)
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_Command+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_Command+0x846>
    2004:	88 ec       	ldi	r24, 0xC8	; 200
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9a 8b       	std	Y+18, r25	; 0x12
    200a:	89 8b       	std	Y+17, r24	; 0x11
    200c:	89 89       	ldd	r24, Y+17	; 0x11
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_Command+0x834>
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	9c 89       	ldd	r25, Y+20	; 0x14
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_Command+0x828>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <LCD_Command+0x878>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	98 8b       	std	Y+16, r25	; 0x10
    2046:	8f 87       	std	Y+15, r24	; 0x0f
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	98 89       	ldd	r25, Y+16	; 0x10
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_Command+0x870>
    2050:	98 8b       	std	Y+16, r25	; 0x10
    2052:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E_LCD,HIGH);
    2054:	83 e0       	ldi	r24, 0x03	; 3
    2056:	61 e0       	ldi	r22, 0x01	; 1
    2058:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e7       	ldi	r26, 0x70	; 112
    2062:	b1 e4       	ldi	r27, 0x41	; 65
    2064:	8b 87       	std	Y+11, r24	; 0x0b
    2066:	9c 87       	std	Y+12, r25	; 0x0c
    2068:	ad 87       	std	Y+13, r26	; 0x0d
    206a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a ef       	ldi	r20, 0xFA	; 250
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8f 83       	std	Y+7, r24	; 0x07
    2086:	98 87       	std	Y+8, r25	; 0x08
    2088:	a9 87       	std	Y+9, r26	; 0x09
    208a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <LCD_Command+0x8d2>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <LCD_Command+0x950>
	else if (__tmp > 65535)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <LCD_Command+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <LCD_Command+0x932>
    20f0:	88 ec       	ldi	r24, 0xC8	; 200
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_Command+0x920>
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <LCD_Command+0x914>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <LCD_Command+0x964>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	6f 81       	ldd	r22, Y+7	; 0x07
    211a:	78 85       	ldd	r23, Y+8	; 0x08
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	9a 81       	ldd	r25, Y+2	; 0x02
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_Command+0x95c>
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
}
    2140:	cf 58       	subi	r28, 0x8F	; 143
    2142:	df 4f       	sbci	r29, 0xFF	; 255
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <LCD_Write_ASCII>:


void LCD_Write_ASCII (uint8 u8Datacopy)
{
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	c1 57       	subi	r28, 0x71	; 113
    2166:	d0 40       	sbci	r29, 0x00	; 0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	fe 01       	movw	r30, r28
    2174:	ef 58       	subi	r30, 0x8F	; 143
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 83       	st	Z, r24
	DIO_WritePin(RS_LCD,HIGH);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    2182:	fe 01       	movw	r30, r28
    2184:	e3 59       	subi	r30, 0x93	; 147
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e8       	ldi	r26, 0x80	; 128
    218e:	bf e3       	ldi	r27, 0x3F	; 63
    2190:	80 83       	st	Z, r24
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	a2 83       	std	Z+2, r26	; 0x02
    2196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	8e 01       	movw	r16, r28
    219a:	07 59       	subi	r16, 0x97	; 151
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	fe 01       	movw	r30, r28
    21a0:	e3 59       	subi	r30, 0x93	; 147
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a ef       	ldi	r20, 0xFA	; 250
    21b2:	54 e4       	ldi	r21, 0x44	; 68
    21b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	f8 01       	movw	r30, r16
    21be:	80 83       	st	Z, r24
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	a2 83       	std	Z+2, r26	; 0x02
    21c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 59       	subi	r30, 0x97	; 151
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	44 f4       	brge	.+16     	; 0x21f4 <LCD_Write_ASCII+0x9c>
		__ticks = 1;
    21e4:	fe 01       	movw	r30, r28
    21e6:	e9 59       	subi	r30, 0x99	; 153
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
    21f2:	64 c0       	rjmp	.+200    	; 0x22bc <LCD_Write_ASCII+0x164>
	else if (__tmp > 65535)
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 59       	subi	r30, 0x97	; 151
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	0c f0       	brlt	.+2      	; 0x2214 <LCD_Write_ASCII+0xbc>
    2212:	43 c0       	rjmp	.+134    	; 0x229a <LCD_Write_ASCII+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2214:	fe 01       	movw	r30, r28
    2216:	e3 59       	subi	r30, 0x93	; 147
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	8e 01       	movw	r16, r28
    2234:	09 59       	subi	r16, 0x99	; 153
    2236:	1f 4f       	sbci	r17, 0xFF	; 255
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	1f c0       	rjmp	.+62     	; 0x228a <LCD_Write_ASCII+0x132>
    224c:	fe 01       	movw	r30, r28
    224e:	eb 59       	subi	r30, 0x9B	; 155
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	fe 01       	movw	r30, r28
    225c:	eb 59       	subi	r30, 0x9B	; 155
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_Write_ASCII+0x10c>
    2268:	fe 01       	movw	r30, r28
    226a:	eb 59       	subi	r30, 0x9B	; 155
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2272:	de 01       	movw	r26, r28
    2274:	a9 59       	subi	r26, 0x99	; 153
    2276:	bf 4f       	sbci	r27, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e9 59       	subi	r30, 0x99	; 153
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	9c 93       	st	X, r25
    2288:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	fe 01       	movw	r30, r28
    228c:	e9 59       	subi	r30, 0x99	; 153
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 81       	ld	r24, Z
    2292:	91 81       	ldd	r25, Z+1	; 0x01
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	d1 f6       	brne	.-76     	; 0x224c <LCD_Write_ASCII+0xf4>
    2298:	27 c0       	rjmp	.+78     	; 0x22e8 <LCD_Write_ASCII+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	8e 01       	movw	r16, r28
    229c:	09 59       	subi	r16, 0x99	; 153
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 59       	subi	r30, 0x97	; 151
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	f8 01       	movw	r30, r16
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	de 01       	movw	r26, r28
    22be:	ad 59       	subi	r26, 0x9D	; 157
    22c0:	bf 4f       	sbci	r27, 0xFF	; 255
    22c2:	fe 01       	movw	r30, r28
    22c4:	e9 59       	subi	r30, 0x99	; 153
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	8d 93       	st	X+, r24
    22ce:	9c 93       	st	X, r25
    22d0:	fe 01       	movw	r30, r28
    22d2:	ed 59       	subi	r30, 0x9D	; 157
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_Write_ASCII+0x182>
    22de:	fe 01       	movw	r30, r28
    22e0:	ed 59       	subi	r30, 0x9D	; 157
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_WritePin(E_LCD,HIGH);
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    22f0:	fe 01       	movw	r30, r28
    22f2:	e1 5a       	subi	r30, 0xA1	; 161
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e8       	ldi	r26, 0x80	; 128
    22fc:	bf e3       	ldi	r27, 0x3F	; 63
    22fe:	80 83       	st	Z, r24
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	a2 83       	std	Z+2, r26	; 0x02
    2304:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	8e 01       	movw	r16, r28
    2308:	05 5a       	subi	r16, 0xA5	; 165
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	fe 01       	movw	r30, r28
    230e:	e1 5a       	subi	r30, 0xA1	; 161
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a ef       	ldi	r20, 0xFA	; 250
    2320:	54 e4       	ldi	r21, 0x44	; 68
    2322:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	f8 01       	movw	r30, r16
    232c:	80 83       	st	Z, r24
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	a2 83       	std	Z+2, r26	; 0x02
    2332:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2334:	fe 01       	movw	r30, r28
    2336:	e5 5a       	subi	r30, 0xA5	; 165
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	93 81       	ldd	r25, Z+3	; 0x03
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	44 f4       	brge	.+16     	; 0x2362 <LCD_Write_ASCII+0x20a>
		__ticks = 1;
    2352:	fe 01       	movw	r30, r28
    2354:	e7 5a       	subi	r30, 0xA7	; 167
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
    2360:	64 c0       	rjmp	.+200    	; 0x242a <LCD_Write_ASCII+0x2d2>
	else if (__tmp > 65535)
    2362:	fe 01       	movw	r30, r28
    2364:	e5 5a       	subi	r30, 0xA5	; 165
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	0c f0       	brlt	.+2      	; 0x2382 <LCD_Write_ASCII+0x22a>
    2380:	43 c0       	rjmp	.+134    	; 0x2408 <LCD_Write_ASCII+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	fe 01       	movw	r30, r28
    2384:	e1 5a       	subi	r30, 0xA1	; 161
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	8e 01       	movw	r16, r28
    23a2:	07 5a       	subi	r16, 0xA7	; 167
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	f8 01       	movw	r30, r16
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	80 83       	st	Z, r24
    23b8:	1f c0       	rjmp	.+62     	; 0x23f8 <LCD_Write_ASCII+0x2a0>
    23ba:	fe 01       	movw	r30, r28
    23bc:	e9 5a       	subi	r30, 0xA9	; 169
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
    23c8:	fe 01       	movw	r30, r28
    23ca:	e9 5a       	subi	r30, 0xA9	; 169
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_Write_ASCII+0x27a>
    23d6:	fe 01       	movw	r30, r28
    23d8:	e9 5a       	subi	r30, 0xA9	; 169
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	de 01       	movw	r26, r28
    23e2:	a7 5a       	subi	r26, 0xA7	; 167
    23e4:	bf 4f       	sbci	r27, 0xFF	; 255
    23e6:	fe 01       	movw	r30, r28
    23e8:	e7 5a       	subi	r30, 0xA7	; 167
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	11 96       	adiw	r26, 0x01	; 1
    23f4:	9c 93       	st	X, r25
    23f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	fe 01       	movw	r30, r28
    23fa:	e7 5a       	subi	r30, 0xA7	; 167
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	d1 f6       	brne	.-76     	; 0x23ba <LCD_Write_ASCII+0x262>
    2406:	27 c0       	rjmp	.+78     	; 0x2456 <LCD_Write_ASCII+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	8e 01       	movw	r16, r28
    240a:	07 5a       	subi	r16, 0xA7	; 167
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	fe 01       	movw	r30, r28
    2410:	e5 5a       	subi	r30, 0xA5	; 165
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	f8 01       	movw	r30, r16
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
    242a:	de 01       	movw	r26, r28
    242c:	ab 5a       	subi	r26, 0xAB	; 171
    242e:	bf 4f       	sbci	r27, 0xFF	; 255
    2430:	fe 01       	movw	r30, r28
    2432:	e7 5a       	subi	r30, 0xA7	; 167
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	80 81       	ld	r24, Z
    2438:	91 81       	ldd	r25, Z+1	; 0x01
    243a:	8d 93       	st	X+, r24
    243c:	9c 93       	st	X, r25
    243e:	fe 01       	movw	r30, r28
    2440:	eb 5a       	subi	r30, 0xAB	; 171
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_Write_ASCII+0x2f0>
    244c:	fe 01       	movw	r30, r28
    244e:	eb 5a       	subi	r30, 0xAB	; 171
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
	_delay_ms(1);

	PORT_LCD=(PORT_LCD & 0x0f)|(u8Datacopy & 0xf0);
    2456:	ab e3       	ldi	r26, 0x3B	; 59
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	eb e3       	ldi	r30, 0x3B	; 59
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	98 2f       	mov	r25, r24
    2462:	9f 70       	andi	r25, 0x0F	; 15
    2464:	fe 01       	movw	r30, r28
    2466:	ef 58       	subi	r30, 0x8F	; 143
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	80 7f       	andi	r24, 0xF0	; 240
    246e:	89 2b       	or	r24, r25
    2470:	8c 93       	st	X, r24
    2472:	fe 01       	movw	r30, r28
    2474:	ef 5a       	subi	r30, 0xAF	; 175
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e8       	ldi	r26, 0x80	; 128
    247e:	bf e3       	ldi	r27, 0x3F	; 63
    2480:	80 83       	st	Z, r24
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	a2 83       	std	Z+2, r26	; 0x02
    2486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	8e 01       	movw	r16, r28
    248a:	03 5b       	subi	r16, 0xB3	; 179
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	fe 01       	movw	r30, r28
    2490:	ef 5a       	subi	r30, 0xAF	; 175
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	60 81       	ld	r22, Z
    2496:	71 81       	ldd	r23, Z+1	; 0x01
    2498:	82 81       	ldd	r24, Z+2	; 0x02
    249a:	93 81       	ldd	r25, Z+3	; 0x03
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	f8 01       	movw	r30, r16
    24ae:	80 83       	st	Z, r24
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	a2 83       	std	Z+2, r26	; 0x02
    24b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b6:	fe 01       	movw	r30, r28
    24b8:	e3 5b       	subi	r30, 0xB3	; 179
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	44 f4       	brge	.+16     	; 0x24e4 <LCD_Write_ASCII+0x38c>
		__ticks = 1;
    24d4:	fe 01       	movw	r30, r28
    24d6:	e5 5b       	subi	r30, 0xB5	; 181
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
    24e2:	64 c0       	rjmp	.+200    	; 0x25ac <LCD_Write_ASCII+0x454>
	else if (__tmp > 65535)
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 5b       	subi	r30, 0xB3	; 179
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	0c f0       	brlt	.+2      	; 0x2504 <LCD_Write_ASCII+0x3ac>
    2502:	43 c0       	rjmp	.+134    	; 0x258a <LCD_Write_ASCII+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	fe 01       	movw	r30, r28
    2506:	ef 5a       	subi	r30, 0xAF	; 175
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e2       	ldi	r20, 0x20	; 32
    2518:	51 e4       	ldi	r21, 0x41	; 65
    251a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8e 01       	movw	r16, r28
    2524:	05 5b       	subi	r16, 0xB5	; 181
    2526:	1f 4f       	sbci	r17, 0xFF	; 255
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	f8 01       	movw	r30, r16
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
    253a:	1f c0       	rjmp	.+62     	; 0x257a <LCD_Write_ASCII+0x422>
    253c:	fe 01       	movw	r30, r28
    253e:	e7 5b       	subi	r30, 0xB7	; 183
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	88 ec       	ldi	r24, 0xC8	; 200
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
    254a:	fe 01       	movw	r30, r28
    254c:	e7 5b       	subi	r30, 0xB7	; 183
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_Write_ASCII+0x3fc>
    2558:	fe 01       	movw	r30, r28
    255a:	e7 5b       	subi	r30, 0xB7	; 183
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	de 01       	movw	r26, r28
    2564:	a5 5b       	subi	r26, 0xB5	; 181
    2566:	bf 4f       	sbci	r27, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	e5 5b       	subi	r30, 0xB5	; 181
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	9c 93       	st	X, r25
    2578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5b       	subi	r30, 0xB5	; 181
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	d1 f6       	brne	.-76     	; 0x253c <LCD_Write_ASCII+0x3e4>
    2588:	27 c0       	rjmp	.+78     	; 0x25d8 <LCD_Write_ASCII+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	8e 01       	movw	r16, r28
    258c:	05 5b       	subi	r16, 0xB5	; 181
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	fe 01       	movw	r30, r28
    2592:	e3 5b       	subi	r30, 0xB3	; 179
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	f8 01       	movw	r30, r16
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	de 01       	movw	r26, r28
    25ae:	a9 5b       	subi	r26, 0xB9	; 185
    25b0:	bf 4f       	sbci	r27, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	e5 5b       	subi	r30, 0xB5	; 181
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	91 81       	ldd	r25, Z+1	; 0x01
    25bc:	8d 93       	st	X+, r24
    25be:	9c 93       	st	X, r25
    25c0:	fe 01       	movw	r30, r28
    25c2:	e9 5b       	subi	r30, 0xB9	; 185
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <LCD_Write_ASCII+0x472>
    25ce:	fe 01       	movw	r30, r28
    25d0:	e9 5b       	subi	r30, 0xB9	; 185
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_WritePin(E_LCD,LOW);
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 5b       	subi	r30, 0xBD	; 189
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	80 83       	st	Z, r24
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	a2 83       	std	Z+2, r26	; 0x02
    25f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	8e 01       	movw	r16, r28
    25f8:	01 5c       	subi	r16, 0xC1	; 193
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	fe 01       	movw	r30, r28
    25fe:	ed 5b       	subi	r30, 0xBD	; 189
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a ef       	ldi	r20, 0xFA	; 250
    2610:	54 e4       	ldi	r21, 0x44	; 68
    2612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	f8 01       	movw	r30, r16
    261c:	80 83       	st	Z, r24
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	a2 83       	std	Z+2, r26	; 0x02
    2622:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2624:	fe 01       	movw	r30, r28
    2626:	ff 96       	adiw	r30, 0x3f	; 63
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_Write_ASCII+0x4f2>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9e af       	std	Y+62, r25	; 0x3e
    2646:	8d af       	std	Y+61, r24	; 0x3d
    2648:	46 c0       	rjmp	.+140    	; 0x26d6 <LCD_Write_ASCII+0x57e>
	else if (__tmp > 65535)
    264a:	fe 01       	movw	r30, r28
    264c:	ff 96       	adiw	r30, 0x3f	; 63
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	3f ef       	ldi	r19, 0xFF	; 255
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	57 e4       	ldi	r21, 0x47	; 71
    265e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	64 f5       	brge	.+88     	; 0x26be <LCD_Write_ASCII+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2666:	fe 01       	movw	r30, r28
    2668:	ed 5b       	subi	r30, 0xBD	; 189
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	60 81       	ld	r22, Z
    266e:	71 81       	ldd	r23, Z+1	; 0x01
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	93 81       	ldd	r25, Z+3	; 0x03
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e2       	ldi	r20, 0x20	; 32
    267a:	51 e4       	ldi	r21, 0x41	; 65
    267c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e af       	std	Y+62, r25	; 0x3e
    2692:	8d af       	std	Y+61, r24	; 0x3d
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <LCD_Write_ASCII+0x55c>
    2696:	88 ec       	ldi	r24, 0xC8	; 200
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9c af       	std	Y+60, r25	; 0x3c
    269c:	8b af       	std	Y+59, r24	; 0x3b
    269e:	8b ad       	ldd	r24, Y+59	; 0x3b
    26a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_Write_ASCII+0x54a>
    26a6:	9c af       	std	Y+60, r25	; 0x3c
    26a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	9e af       	std	Y+62, r25	; 0x3e
    26b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f7       	brne	.-38     	; 0x2696 <LCD_Write_ASCII+0x53e>
    26bc:	16 c0       	rjmp	.+44     	; 0x26ea <LCD_Write_ASCII+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	fe 01       	movw	r30, r28
    26c0:	ff 96       	adiw	r30, 0x3f	; 63
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9e af       	std	Y+62, r25	; 0x3e
    26d4:	8d af       	std	Y+61, r24	; 0x3d
    26d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26da:	9a af       	std	Y+58, r25	; 0x3a
    26dc:	89 af       	std	Y+57, r24	; 0x39
    26de:	89 ad       	ldd	r24, Y+57	; 0x39
    26e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_Write_ASCII+0x58a>
    26e6:	9a af       	std	Y+58, r25	; 0x3a
    26e8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_WritePin(E_LCD,HIGH);
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	61 e0       	ldi	r22, 0x01	; 1
    26ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e8       	ldi	r26, 0x80	; 128
    26f8:	bf e3       	ldi	r27, 0x3F	; 63
    26fa:	8d ab       	std	Y+53, r24	; 0x35
    26fc:	9e ab       	std	Y+54, r25	; 0x36
    26fe:	af ab       	std	Y+55, r26	; 0x37
    2700:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	6d a9       	ldd	r22, Y+53	; 0x35
    2704:	7e a9       	ldd	r23, Y+54	; 0x36
    2706:	8f a9       	ldd	r24, Y+55	; 0x37
    2708:	98 ad       	ldd	r25, Y+56	; 0x38
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a ef       	ldi	r20, 0xFA	; 250
    2710:	54 e4       	ldi	r21, 0x44	; 68
    2712:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	89 ab       	std	Y+49, r24	; 0x31
    271c:	9a ab       	std	Y+50, r25	; 0x32
    271e:	ab ab       	std	Y+51, r26	; 0x33
    2720:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2722:	69 a9       	ldd	r22, Y+49	; 0x31
    2724:	7a a9       	ldd	r23, Y+50	; 0x32
    2726:	8b a9       	ldd	r24, Y+51	; 0x33
    2728:	9c a9       	ldd	r25, Y+52	; 0x34
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	2c f4       	brge	.+10     	; 0x2744 <LCD_Write_ASCII+0x5ec>
		__ticks = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	98 ab       	std	Y+48, r25	; 0x30
    2740:	8f a7       	std	Y+47, r24	; 0x2f
    2742:	3f c0       	rjmp	.+126    	; 0x27c2 <LCD_Write_ASCII+0x66a>
	else if (__tmp > 65535)
    2744:	69 a9       	ldd	r22, Y+49	; 0x31
    2746:	7a a9       	ldd	r23, Y+50	; 0x32
    2748:	8b a9       	ldd	r24, Y+51	; 0x33
    274a:	9c a9       	ldd	r25, Y+52	; 0x34
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	4c f5       	brge	.+82     	; 0x27ae <LCD_Write_ASCII+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	6d a9       	ldd	r22, Y+53	; 0x35
    275e:	7e a9       	ldd	r23, Y+54	; 0x36
    2760:	8f a9       	ldd	r24, Y+55	; 0x37
    2762:	98 ad       	ldd	r25, Y+56	; 0x38
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	98 ab       	std	Y+48, r25	; 0x30
    2782:	8f a7       	std	Y+47, r24	; 0x2f
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <LCD_Write_ASCII+0x64c>
    2786:	88 ec       	ldi	r24, 0xC8	; 200
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9e a7       	std	Y+46, r25	; 0x2e
    278c:	8d a7       	std	Y+45, r24	; 0x2d
    278e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2790:	9e a5       	ldd	r25, Y+46	; 0x2e
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_Write_ASCII+0x63a>
    2796:	9e a7       	std	Y+46, r25	; 0x2e
    2798:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279a:	8f a5       	ldd	r24, Y+47	; 0x2f
    279c:	98 a9       	ldd	r25, Y+48	; 0x30
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	98 ab       	std	Y+48, r25	; 0x30
    27a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a6:	98 a9       	ldd	r25, Y+48	; 0x30
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	69 f7       	brne	.-38     	; 0x2786 <LCD_Write_ASCII+0x62e>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <LCD_Write_ASCII+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	69 a9       	ldd	r22, Y+49	; 0x31
    27b0:	7a a9       	ldd	r23, Y+50	; 0x32
    27b2:	8b a9       	ldd	r24, Y+51	; 0x33
    27b4:	9c a9       	ldd	r25, Y+52	; 0x34
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	98 ab       	std	Y+48, r25	; 0x30
    27c0:	8f a7       	std	Y+47, r24	; 0x2f
    27c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c4:	98 a9       	ldd	r25, Y+48	; 0x30
    27c6:	9c a7       	std	Y+44, r25	; 0x2c
    27c8:	8b a7       	std	Y+43, r24	; 0x2b
    27ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    27cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_Write_ASCII+0x676>
    27d2:	9c a7       	std	Y+44, r25	; 0x2c
    27d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);


	PORT_LCD=(PORT_LCD & 0x0f)|((u8Datacopy & 0x0f) <<4 );
    27d6:	ab e3       	ldi	r26, 0x3B	; 59
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	eb e3       	ldi	r30, 0x3B	; 59
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	2f 70       	andi	r18, 0x0F	; 15
    27e4:	fe 01       	movw	r30, r28
    27e6:	ef 58       	subi	r30, 0x8F	; 143
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	80 81       	ld	r24, Z
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	82 95       	swap	r24
    27f2:	92 95       	swap	r25
    27f4:	90 7f       	andi	r25, 0xF0	; 240
    27f6:	98 27       	eor	r25, r24
    27f8:	80 7f       	andi	r24, 0xF0	; 240
    27fa:	98 27       	eor	r25, r24
    27fc:	82 2b       	or	r24, r18
    27fe:	8c 93       	st	X, r24
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	a0 e8       	ldi	r26, 0x80	; 128
    2806:	bf e3       	ldi	r27, 0x3F	; 63
    2808:	8f a3       	std	Y+39, r24	; 0x27
    280a:	98 a7       	std	Y+40, r25	; 0x28
    280c:	a9 a7       	std	Y+41, r26	; 0x29
    280e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	6f a1       	ldd	r22, Y+39	; 0x27
    2812:	78 a5       	ldd	r23, Y+40	; 0x28
    2814:	89 a5       	ldd	r24, Y+41	; 0x29
    2816:	9a a5       	ldd	r25, Y+42	; 0x2a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a ef       	ldi	r20, 0xFA	; 250
    281e:	54 e4       	ldi	r21, 0x44	; 68
    2820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8b a3       	std	Y+35, r24	; 0x23
    282a:	9c a3       	std	Y+36, r25	; 0x24
    282c:	ad a3       	std	Y+37, r26	; 0x25
    282e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2830:	6b a1       	ldd	r22, Y+35	; 0x23
    2832:	7c a1       	ldd	r23, Y+36	; 0x24
    2834:	8d a1       	ldd	r24, Y+37	; 0x25
    2836:	9e a1       	ldd	r25, Y+38	; 0x26
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <LCD_Write_ASCII+0x6fa>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9a a3       	std	Y+34, r25	; 0x22
    284e:	89 a3       	std	Y+33, r24	; 0x21
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <LCD_Write_ASCII+0x778>
	else if (__tmp > 65535)
    2852:	6b a1       	ldd	r22, Y+35	; 0x23
    2854:	7c a1       	ldd	r23, Y+36	; 0x24
    2856:	8d a1       	ldd	r24, Y+37	; 0x25
    2858:	9e a1       	ldd	r25, Y+38	; 0x26
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <LCD_Write_ASCII+0x764>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	6f a1       	ldd	r22, Y+39	; 0x27
    286c:	78 a5       	ldd	r23, Y+40	; 0x28
    286e:	89 a5       	ldd	r24, Y+41	; 0x29
    2870:	9a a5       	ldd	r25, Y+42	; 0x2a
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9a a3       	std	Y+34, r25	; 0x22
    2890:	89 a3       	std	Y+33, r24	; 0x21
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <LCD_Write_ASCII+0x75a>
    2894:	88 ec       	ldi	r24, 0xC8	; 200
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	98 a3       	std	Y+32, r25	; 0x20
    289a:	8f 8f       	std	Y+31, r24	; 0x1f
    289c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    289e:	98 a1       	ldd	r25, Y+32	; 0x20
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_Write_ASCII+0x748>
    28a4:	98 a3       	std	Y+32, r25	; 0x20
    28a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	89 a1       	ldd	r24, Y+33	; 0x21
    28aa:	9a a1       	ldd	r25, Y+34	; 0x22
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9a a3       	std	Y+34, r25	; 0x22
    28b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	89 a1       	ldd	r24, Y+33	; 0x21
    28b4:	9a a1       	ldd	r25, Y+34	; 0x22
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <LCD_Write_ASCII+0x73c>
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <LCD_Write_ASCII+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6b a1       	ldd	r22, Y+35	; 0x23
    28be:	7c a1       	ldd	r23, Y+36	; 0x24
    28c0:	8d a1       	ldd	r24, Y+37	; 0x25
    28c2:	9e a1       	ldd	r25, Y+38	; 0x26
    28c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9a a3       	std	Y+34, r25	; 0x22
    28ce:	89 a3       	std	Y+33, r24	; 0x21
    28d0:	89 a1       	ldd	r24, Y+33	; 0x21
    28d2:	9a a1       	ldd	r25, Y+34	; 0x22
    28d4:	9e 8f       	std	Y+30, r25	; 0x1e
    28d6:	8d 8f       	std	Y+29, r24	; 0x1d
    28d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <LCD_Write_ASCII+0x784>
    28e0:	9e 8f       	std	Y+30, r25	; 0x1e
    28e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_WritePin(E_LCD,LOW);
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	a0 e8       	ldi	r26, 0x80	; 128
    28f2:	bf e3       	ldi	r27, 0x3F	; 63
    28f4:	89 8f       	std	Y+25, r24	; 0x19
    28f6:	9a 8f       	std	Y+26, r25	; 0x1a
    28f8:	ab 8f       	std	Y+27, r26	; 0x1b
    28fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fc:	69 8d       	ldd	r22, Y+25	; 0x19
    28fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2900:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2902:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a ef       	ldi	r20, 0xFA	; 250
    290a:	54 e4       	ldi	r21, 0x44	; 68
    290c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	8d 8b       	std	Y+21, r24	; 0x15
    2916:	9e 8b       	std	Y+22, r25	; 0x16
    2918:	af 8b       	std	Y+23, r26	; 0x17
    291a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    291c:	6d 89       	ldd	r22, Y+21	; 0x15
    291e:	7e 89       	ldd	r23, Y+22	; 0x16
    2920:	8f 89       	ldd	r24, Y+23	; 0x17
    2922:	98 8d       	ldd	r25, Y+24	; 0x18
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	2c f4       	brge	.+10     	; 0x293e <LCD_Write_ASCII+0x7e6>
		__ticks = 1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	3f c0       	rjmp	.+126    	; 0x29bc <LCD_Write_ASCII+0x864>
	else if (__tmp > 65535)
    293e:	6d 89       	ldd	r22, Y+21	; 0x15
    2940:	7e 89       	ldd	r23, Y+22	; 0x16
    2942:	8f 89       	ldd	r24, Y+23	; 0x17
    2944:	98 8d       	ldd	r25, Y+24	; 0x18
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	4c f5       	brge	.+82     	; 0x29a8 <LCD_Write_ASCII+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	69 8d       	ldd	r22, Y+25	; 0x19
    2958:	7a 8d       	ldd	r23, Y+26	; 0x1a
    295a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    295c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9c 8b       	std	Y+20, r25	; 0x14
    297c:	8b 8b       	std	Y+19, r24	; 0x13
    297e:	0f c0       	rjmp	.+30     	; 0x299e <LCD_Write_ASCII+0x846>
    2980:	88 ec       	ldi	r24, 0xC8	; 200
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9a 8b       	std	Y+18, r25	; 0x12
    2986:	89 8b       	std	Y+17, r24	; 0x11
    2988:	89 89       	ldd	r24, Y+17	; 0x11
    298a:	9a 89       	ldd	r25, Y+18	; 0x12
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCD_Write_ASCII+0x834>
    2990:	9a 8b       	std	Y+18, r25	; 0x12
    2992:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2994:	8b 89       	ldd	r24, Y+19	; 0x13
    2996:	9c 89       	ldd	r25, Y+20	; 0x14
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299e:	8b 89       	ldd	r24, Y+19	; 0x13
    29a0:	9c 89       	ldd	r25, Y+20	; 0x14
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	69 f7       	brne	.-38     	; 0x2980 <LCD_Write_ASCII+0x828>
    29a6:	14 c0       	rjmp	.+40     	; 0x29d0 <LCD_Write_ASCII+0x878>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	6d 89       	ldd	r22, Y+21	; 0x15
    29aa:	7e 89       	ldd	r23, Y+22	; 0x16
    29ac:	8f 89       	ldd	r24, Y+23	; 0x17
    29ae:	98 8d       	ldd	r25, Y+24	; 0x18
    29b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9c 8b       	std	Y+20, r25	; 0x14
    29ba:	8b 8b       	std	Y+19, r24	; 0x13
    29bc:	8b 89       	ldd	r24, Y+19	; 0x13
    29be:	9c 89       	ldd	r25, Y+20	; 0x14
    29c0:	98 8b       	std	Y+16, r25	; 0x10
    29c2:	8f 87       	std	Y+15, r24	; 0x0f
    29c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c6:	98 89       	ldd	r25, Y+16	; 0x10
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_Write_ASCII+0x870>
    29cc:	98 8b       	std	Y+16, r25	; 0x10
    29ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(E_LCD,HIGH);
    29d0:	83 e0       	ldi	r24, 0x03	; 3
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_WritePin>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a0 e7       	ldi	r26, 0x70	; 112
    29de:	b1 e4       	ldi	r27, 0x41	; 65
    29e0:	8b 87       	std	Y+11, r24	; 0x0b
    29e2:	9c 87       	std	Y+12, r25	; 0x0c
    29e4:	ad 87       	std	Y+13, r26	; 0x0d
    29e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4a ef       	ldi	r20, 0xFA	; 250
    29f6:	54 e4       	ldi	r21, 0x44	; 68
    29f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8f 83       	std	Y+7, r24	; 0x07
    2a02:	98 87       	std	Y+8, r25	; 0x08
    2a04:	a9 87       	std	Y+9, r26	; 0x09
    2a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <LCD_Write_ASCII+0x8d2>
		__ticks = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	3f c0       	rjmp	.+126    	; 0x2aa8 <LCD_Write_ASCII+0x950>
	else if (__tmp > 65535)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	4c f5       	brge	.+82     	; 0x2a94 <LCD_Write_ASCII+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e2       	ldi	r20, 0x20	; 32
    2a50:	51 e4       	ldi	r21, 0x41	; 65
    2a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <LCD_Write_ASCII+0x932>
    2a6c:	88 ec       	ldi	r24, 0xC8	; 200
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <LCD_Write_ASCII+0x920>
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <LCD_Write_ASCII+0x914>
    2a92:	14 c0       	rjmp	.+40     	; 0x2abc <LCD_Write_ASCII+0x964>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_Write_ASCII+0x95c>
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    2abc:	cf 58       	subi	r28, 0x8F	; 143
    2abe:	df 4f       	sbci	r29, 0xFF	; 255
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <LCD_GOTO>:


void LCD_GOTO (uint8 LINE,uint8 COLUMN)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	00 d0       	rcall	.+0      	; 0x2ada <LCD_GOTO+0x6>
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <LCD_GOTO+0x8>
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	6a 83       	std	Y+2, r22	; 0x02
	if ( ( COLUMN > COLUMN_MIN ) && ( COLUMN <= COLUMN_MAX ) )
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	88 23       	and	r24, r24
    2ae8:	e1 f0       	breq	.+56     	; 0x2b22 <LCD_GOTO+0x4e>
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	81 31       	cpi	r24, 0x11	; 17
    2aee:	c8 f4       	brcc	.+50     	; 0x2b22 <LCD_GOTO+0x4e>
	{
		switch (LINE)
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	3c 83       	std	Y+4, r19	; 0x04
    2af8:	2b 83       	std	Y+3, r18	; 0x03
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	81 30       	cpi	r24, 0x01	; 1
    2b00:	91 05       	cpc	r25, r1
    2b02:	31 f0       	breq	.+12     	; 0x2b10 <LCD_GOTO+0x3c>
    2b04:	2b 81       	ldd	r18, Y+3	; 0x03
    2b06:	3c 81       	ldd	r19, Y+4	; 0x04
    2b08:	22 30       	cpi	r18, 0x02	; 2
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	31 f0       	breq	.+12     	; 0x2b1a <LCD_GOTO+0x46>
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <LCD_GOTO+0x4e>
		{
			case LINE_1 :
							LCD_Command( ( lcd_line_1_address ) + ( COLUMN ) );
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	81 58       	subi	r24, 0x81	; 129
    2b14:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
    2b18:	04 c0       	rjmp	.+8      	; 0x2b22 <LCD_GOTO+0x4e>
							break;

			case LINE_2 :
							LCD_Command( ( lcd_line_2_address ) + ( COLUMN ) );
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	81 54       	subi	r24, 0x41	; 65
    2b1e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <LCD_Command>
	else
	{

	}

}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <LCD_Write_Word>:


void LCD_Write_Word(uint8* word)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <LCD_Write_Word+0x6>
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	9b 83       	std	Y+3, r25	; 0x03
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 iterator;
	for( iterator=0;word[iterator]!=0;iterator++ )
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	0e c0       	rjmp	.+28     	; 0x2b60 <LCD_Write_Word+0x30>
	{
		LCD_Write_ASCII( word[iterator] );
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	fc 01       	movw	r30, r24
    2b50:	e2 0f       	add	r30, r18
    2b52:	f3 1f       	adc	r31, r19
    2b54:	80 81       	ld	r24, Z
    2b56:	0e 94 ac 10 	call	0x2158	; 0x2158 <LCD_Write_ASCII>


void LCD_Write_Word(uint8* word)
{
	uint8 iterator;
	for( iterator=0;word[iterator]!=0;iterator++ )
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	8f 5f       	subi	r24, 0xFF	; 255
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	80 81       	ld	r24, Z
    2b72:	88 23       	and	r24, r24
    2b74:	39 f7       	brne	.-50     	; 0x2b44 <LCD_Write_Word+0x14>
	{
		LCD_Write_ASCII( word[iterator] );
	}

}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <reverse>:


// a function to reverse a string
void reverse (uint8 *str, uint8 length)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <reverse+0x6>
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <reverse+0x8>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <reverse+0xa>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	9d 83       	std	Y+5, r25	; 0x05
    2b92:	8c 83       	std	Y+4, r24	; 0x04
    2b94:	6e 83       	std	Y+6, r22	; 0x06
	uint8 start = 0;
    2b96:	1b 82       	std	Y+3, r1	; 0x03
	uint8 end = length-1;
    2b98:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9a:	81 50       	subi	r24, 0x01	; 1
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
    2b9e:	2c c0       	rjmp	.+88     	; 0x2bf8 <reverse+0x76>
	while( start < end )
	{
		uint8 temp = str[start] ;
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    2baa:	fc 01       	movw	r30, r24
    2bac:	e2 0f       	add	r30, r18
    2bae:	f3 1f       	adc	r31, r19
    2bb0:	80 81       	ld	r24, Z
    2bb2:	89 83       	std	Y+1, r24	; 0x01

		str[start] = str[end];
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	a2 0f       	add	r26, r18
    2bc2:	b3 1f       	adc	r27, r19
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e2 0f       	add	r30, r18
    2bd2:	f3 1f       	adc	r31, r19
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8c 93       	st	X, r24

		str[end] = temp;
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8c 81       	ldd	r24, Y+4	; 0x04
    2be0:	9d 81       	ldd	r25, Y+5	; 0x05
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	80 83       	st	Z, r24

		start++;
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
		end--;
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	81 50       	subi	r24, 0x01	; 1
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
// a function to reverse a string
void reverse (uint8 *str, uint8 length)
{
	uint8 start = 0;
	uint8 end = length-1;
	while( start < end )
    2bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	98 17       	cp	r25, r24
    2bfe:	80 f2       	brcs	.-96     	; 0x2ba0 <reverse+0x1e>

		start++;
		end--;
	}

}
    2c00:	26 96       	adiw	r28, 0x06	; 6
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <integer_to_string>:


uint8* integer_to_string (sint32 number,uint8* str,uint8 base)

{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	2c 97       	sbiw	r28, 0x0c	; 12
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	6c 83       	std	Y+4, r22	; 0x04
    2c28:	7d 83       	std	Y+5, r23	; 0x05
    2c2a:	8e 83       	std	Y+6, r24	; 0x06
    2c2c:	9f 83       	std	Y+7, r25	; 0x07
    2c2e:	59 87       	std	Y+9, r21	; 0x09
    2c30:	48 87       	std	Y+8, r20	; 0x08
    2c32:	2a 87       	std	Y+10, r18	; 0x0a
	// index for length

	uint8 i = 0;
    2c34:	1b 82       	std	Y+3, r1	; 0x03
	uint8 isNegative = 0;
    2c36:	1a 82       	std	Y+2, r1	; 0x02

	// Handle 0 explicitely

	if (number == 0)
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3c:	ae 81       	ldd	r26, Y+6	; 0x06
    2c3e:	bf 81       	ldd	r27, Y+7	; 0x07
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	a1 05       	cpc	r26, r1
    2c44:	b1 05       	cpc	r27, r1
    2c46:	d9 f4       	brne	.+54     	; 0x2c7e <integer_to_string+0x6c>
	{
		str[i++] = '0';
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	88 85       	ldd	r24, Y+8	; 0x08
    2c50:	99 85       	ldd	r25, Y+9	; 0x09
    2c52:	fc 01       	movw	r30, r24
    2c54:	e2 0f       	add	r30, r18
    2c56:	f3 1f       	adc	r31, r19
    2c58:	80 e3       	ldi	r24, 0x30	; 48
    2c5a:	80 83       	st	Z, r24
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		str[i] = '\0';  // the end of the string
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	88 85       	ldd	r24, Y+8	; 0x08
    2c6a:	99 85       	ldd	r25, Y+9	; 0x09
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	10 82       	st	Z, r1
		return str;
    2c74:	88 85       	ldd	r24, Y+8	; 0x08
    2c76:	99 85       	ldd	r25, Y+9	; 0x09
    2c78:	9c 87       	std	Y+12, r25	; 0x0c
    2c7a:	8b 87       	std	Y+11, r24	; 0x0b
    2c7c:	8b c0       	rjmp	.+278    	; 0x2d94 <integer_to_string+0x182>
	}

	// negative numbers are handled only with
	// base 10. Otherwise numbers are considered unsigned

	if (number <0 && base ==10)
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	9d 81       	ldd	r25, Y+5	; 0x05
    2c82:	ae 81       	ldd	r26, Y+6	; 0x06
    2c84:	bf 81       	ldd	r27, Y+7	; 0x07
    2c86:	bb 23       	and	r27, r27
    2c88:	0c f0       	brlt	.+2      	; 0x2c8c <integer_to_string+0x7a>
    2c8a:	59 c0       	rjmp	.+178    	; 0x2d3e <integer_to_string+0x12c>
    2c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c8e:	8a 30       	cpi	r24, 0x0A	; 10
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <integer_to_string+0x82>
    2c92:	55 c0       	rjmp	.+170    	; 0x2d3e <integer_to_string+0x12c>
	{
		isNegative = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	8a 83       	std	Y+2, r24	; 0x02
		number = -number; // to get the absolute value of the number
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9c:	ae 81       	ldd	r26, Y+6	; 0x06
    2c9e:	bf 81       	ldd	r27, Y+7	; 0x07
    2ca0:	b0 95       	com	r27
    2ca2:	a0 95       	com	r26
    2ca4:	90 95       	com	r25
    2ca6:	81 95       	neg	r24
    2ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    2caa:	af 4f       	sbci	r26, 0xFF	; 255
    2cac:	bf 4f       	sbci	r27, 0xFF	; 255
    2cae:	8c 83       	std	Y+4, r24	; 0x04
    2cb0:	9d 83       	std	Y+5, r25	; 0x05
    2cb2:	ae 83       	std	Y+6, r26	; 0x06
    2cb4:	bf 83       	std	Y+7, r27	; 0x07
    2cb6:	43 c0       	rjmp	.+134    	; 0x2d3e <integer_to_string+0x12c>
	}

	while (number != 0)
	{

		uint8 remainder = number % base ;
    2cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc6:	ae 81       	ldd	r26, Y+6	; 0x06
    2cc8:	bf 81       	ldd	r27, Y+7	; 0x07
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__divmodsi4>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	89 83       	std	Y+1, r24	; 0x01
		if (remainder > 9)
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	8a 30       	cpi	r24, 0x0A	; 10
    2cdc:	78 f0       	brcs	.+30     	; 0x2cfc <integer_to_string+0xea>
		{
			str[i++] = (remainder-10) + 'A';  // for hexa-decimal only
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	88 85       	ldd	r24, Y+8	; 0x08
    2ce6:	99 85       	ldd	r25, Y+9	; 0x09
    2ce8:	fc 01       	movw	r30, r24
    2cea:	e2 0f       	add	r30, r18
    2cec:	f3 1f       	adc	r31, r19
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	89 5c       	subi	r24, 0xC9	; 201
    2cf2:	80 83       	st	Z, r24
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	8b 83       	std	Y+3, r24	; 0x03
    2cfa:	0e c0       	rjmp	.+28     	; 0x2d18 <integer_to_string+0x106>

		}
		else
		{
			str[i++] = remainder + '0';
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	88 85       	ldd	r24, Y+8	; 0x08
    2d04:	99 85       	ldd	r25, Y+9	; 0x09
    2d06:	fc 01       	movw	r30, r24
    2d08:	e2 0f       	add	r30, r18
    2d0a:	f3 1f       	adc	r31, r19
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	80 5d       	subi	r24, 0xD0	; 208
    2d10:	80 83       	st	Z, r24
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	8f 5f       	subi	r24, 0xFF	; 255
    2d16:	8b 83       	std	Y+3, r24	; 0x03
		}
		number=number/base;
    2d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	50 e0       	ldi	r21, 0x00	; 0
    2d22:	8c 81       	ldd	r24, Y+4	; 0x04
    2d24:	9d 81       	ldd	r25, Y+5	; 0x05
    2d26:	ae 81       	ldd	r26, Y+6	; 0x06
    2d28:	bf 81       	ldd	r27, Y+7	; 0x07
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__divmodsi4>
    2d32:	da 01       	movw	r26, r20
    2d34:	c9 01       	movw	r24, r18
    2d36:	8c 83       	std	Y+4, r24	; 0x04
    2d38:	9d 83       	std	Y+5, r25	; 0x05
    2d3a:	ae 83       	std	Y+6, r26	; 0x06
    2d3c:	bf 83       	std	Y+7, r27	; 0x07
	{
		isNegative = 1;
		number = -number; // to get the absolute value of the number
	}

	while (number != 0)
    2d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d40:	9d 81       	ldd	r25, Y+5	; 0x05
    2d42:	ae 81       	ldd	r26, Y+6	; 0x06
    2d44:	bf 81       	ldd	r27, Y+7	; 0x07
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	a1 05       	cpc	r26, r1
    2d4a:	b1 05       	cpc	r27, r1
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <integer_to_string+0x13e>
    2d4e:	b4 cf       	rjmp	.-152    	; 0x2cb8 <integer_to_string+0xa6>
			str[i++] = remainder + '0';
		}
		number=number/base;
	}

	if (isNegative)
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	88 23       	and	r24, r24
    2d54:	69 f0       	breq	.+26     	; 0x2d70 <integer_to_string+0x15e>
	{
		str[i++] = '-';
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	88 85       	ldd	r24, Y+8	; 0x08
    2d5e:	99 85       	ldd	r25, Y+9	; 0x09
    2d60:	fc 01       	movw	r30, r24
    2d62:	e2 0f       	add	r30, r18
    2d64:	f3 1f       	adc	r31, r19
    2d66:	8d e2       	ldi	r24, 0x2D	; 45
    2d68:	80 83       	st	Z, r24
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	8f 5f       	subi	r24, 0xFF	; 255
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
	}

	str[i] = '\0';  // the end of the string
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	88 85       	ldd	r24, Y+8	; 0x08
    2d78:	99 85       	ldd	r25, Y+9	; 0x09
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e2 0f       	add	r30, r18
    2d7e:	f3 1f       	adc	r31, r19
    2d80:	10 82       	st	Z, r1

	reverse(str,i); // where i  index for the length of the string
    2d82:	88 85       	ldd	r24, Y+8	; 0x08
    2d84:	99 85       	ldd	r25, Y+9	; 0x09
    2d86:	6b 81       	ldd	r22, Y+3	; 0x03
    2d88:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <reverse>

	return str;
    2d8c:	88 85       	ldd	r24, Y+8	; 0x08
    2d8e:	99 85       	ldd	r25, Y+9	; 0x09
    2d90:	9c 87       	std	Y+12, r25	; 0x0c
    2d92:	8b 87       	std	Y+11, r24	; 0x0b
    2d94:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d96:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    2d98:	2c 96       	adiw	r28, 0x0c	; 12
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <LCD_Write_Integer_Number>:


void LCD_Write_Integer_Number (sint32 number )
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	64 97       	sbiw	r28, 0x14	; 20
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	69 8b       	std	Y+17, r22	; 0x11
    2dc0:	7a 8b       	std	Y+18, r23	; 0x12
    2dc2:	8b 8b       	std	Y+19, r24	; 0x13
    2dc4:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 str[16];
	integer_to_string(number,str,10) ;
    2dc6:	89 89       	ldd	r24, Y+17	; 0x11
    2dc8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dca:	ab 89       	ldd	r26, Y+19	; 0x13
    2dcc:	bc 89       	ldd	r27, Y+20	; 0x14
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	9e 01       	movw	r18, r28
    2dd4:	2f 5f       	subi	r18, 0xFF	; 255
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	a9 01       	movw	r20, r18
    2dda:	2a e0       	ldi	r18, 0x0A	; 10
    2ddc:	0e 94 09 16 	call	0x2c12	; 0x2c12 <integer_to_string>

	LCD_Write_Word((uint8*)str);
    2de0:	ce 01       	movw	r24, r28
    2de2:	01 96       	adiw	r24, 0x01	; 1
    2de4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_Write_Word>

}
    2de8:	64 96       	adiw	r28, 0x14	; 20
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <main>:
#include "LCD.h"
#include "keypad.h"
#include "util/delay.h"

int main ()
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	0f 92       	push	r0
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
	LCD_Intialization();
    2e04:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <LCD_Intialization>

	LCD_Write_ASCII('A');
    2e08:	81 e4       	ldi	r24, 0x41	; 65
    2e0a:	0e 94 ac 10 	call	0x2158	; 0x2158 <LCD_Write_ASCII>

	uint8 numberpressed=0;
    2e0e:	19 82       	std	Y+1, r1	; 0x01

	for(;;)
	{

		numberpressed = KeyPad_getPressedKey();
    2e10:	0e 94 81 17 	call	0x2f02	; 0x2f02 <KeyPad_getPressedKey>
    2e14:	89 83       	std	Y+1, r24	; 0x01
		LCD_Write_Integer_Number(numberpressed);
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	a0 e0       	ldi	r26, 0x00	; 0
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_Write_Integer_Number>
    2e28:	f3 cf       	rjmp	.-26     	; 0x2e10 <main+0x16>

00002e2a <KeyPad_3x3_adjustKeyNumber>:

#include "keypad.h"


static uint8 KeyPad_3x3_adjustKeyNumber(uint8 button_number)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <KeyPad_3x3_adjustKeyNumber+0x6>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <KeyPad_3x3_adjustKeyNumber+0x8>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	3c 83       	std	Y+4, r19	; 0x04
    2e40:	2b 83       	std	Y+3, r18	; 0x03
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	85 30       	cpi	r24, 0x05	; 5
    2e48:	91 05       	cpc	r25, r1
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <KeyPad_3x3_adjustKeyNumber+0x24>
    2e4c:	41 c0       	rjmp	.+130    	; 0x2ed0 <KeyPad_3x3_adjustKeyNumber+0xa6>
    2e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e50:	3c 81       	ldd	r19, Y+4	; 0x04
    2e52:	26 30       	cpi	r18, 0x06	; 6
    2e54:	31 05       	cpc	r19, r1
    2e56:	dc f4       	brge	.+54     	; 0x2e8e <KeyPad_3x3_adjustKeyNumber+0x64>
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	82 30       	cpi	r24, 0x02	; 2
    2e5e:	91 05       	cpc	r25, r1
    2e60:	71 f1       	breq	.+92     	; 0x2ebe <KeyPad_3x3_adjustKeyNumber+0x94>
    2e62:	2b 81       	ldd	r18, Y+3	; 0x03
    2e64:	3c 81       	ldd	r19, Y+4	; 0x04
    2e66:	23 30       	cpi	r18, 0x03	; 3
    2e68:	31 05       	cpc	r19, r1
    2e6a:	34 f4       	brge	.+12     	; 0x2e78 <KeyPad_3x3_adjustKeyNumber+0x4e>
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f1       	breq	.+66     	; 0x2eb8 <KeyPad_3x3_adjustKeyNumber+0x8e>
    2e76:	3b c0       	rjmp	.+118    	; 0x2eee <KeyPad_3x3_adjustKeyNumber+0xc4>
    2e78:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e7c:	23 30       	cpi	r18, 0x03	; 3
    2e7e:	31 05       	cpc	r19, r1
    2e80:	09 f1       	breq	.+66     	; 0x2ec4 <KeyPad_3x3_adjustKeyNumber+0x9a>
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	84 30       	cpi	r24, 0x04	; 4
    2e88:	91 05       	cpc	r25, r1
    2e8a:	f9 f0       	breq	.+62     	; 0x2eca <KeyPad_3x3_adjustKeyNumber+0xa0>
    2e8c:	30 c0       	rjmp	.+96     	; 0x2eee <KeyPad_3x3_adjustKeyNumber+0xc4>
    2e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e90:	3c 81       	ldd	r19, Y+4	; 0x04
    2e92:	27 30       	cpi	r18, 0x07	; 7
    2e94:	31 05       	cpc	r19, r1
    2e96:	11 f1       	breq	.+68     	; 0x2edc <KeyPad_3x3_adjustKeyNumber+0xb2>
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9c:	87 30       	cpi	r24, 0x07	; 7
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	d4 f0       	brlt	.+52     	; 0x2ed6 <KeyPad_3x3_adjustKeyNumber+0xac>
    2ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea6:	28 30       	cpi	r18, 0x08	; 8
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	d9 f0       	breq	.+54     	; 0x2ee2 <KeyPad_3x3_adjustKeyNumber+0xb8>
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb0:	89 30       	cpi	r24, 0x09	; 9
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	c9 f0       	breq	.+50     	; 0x2ee8 <KeyPad_3x3_adjustKeyNumber+0xbe>
    2eb6:	1b c0       	rjmp	.+54     	; 0x2eee <KeyPad_3x3_adjustKeyNumber+0xc4>
	{
	case 1: return 1;
    2eb8:	91 e0       	ldi	r25, 0x01	; 1
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	1a c0       	rjmp	.+52     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 2: return 2;
    2ebe:	22 e0       	ldi	r18, 0x02	; 2
    2ec0:	2a 83       	std	Y+2, r18	; 0x02
    2ec2:	17 c0       	rjmp	.+46     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 3: return 3;
    2ec4:	33 e0       	ldi	r19, 0x03	; 3
    2ec6:	3a 83       	std	Y+2, r19	; 0x02
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 4: return 4; // ASCII Code of %
    2eca:	84 e0       	ldi	r24, 0x04	; 4
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
    2ece:	11 c0       	rjmp	.+34     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 5: return 5;
    2ed0:	95 e0       	ldi	r25, 0x05	; 5
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	0e c0       	rjmp	.+28     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 6: return 6;
    2ed6:	26 e0       	ldi	r18, 0x06	; 6
    2ed8:	2a 83       	std	Y+2, r18	; 0x02
    2eda:	0b c0       	rjmp	.+22     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 7: return 7;
    2edc:	37 e0       	ldi	r19, 0x07	; 7
    2ede:	3a 83       	std	Y+2, r19	; 0x02
    2ee0:	08 c0       	rjmp	.+16     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 8: return 8; /* ASCII Code of '*' */
    2ee2:	88 e0       	ldi	r24, 0x08	; 8
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
    2ee6:	05 c0       	rjmp	.+10     	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 9: return 9;
    2ee8:	99 e0       	ldi	r25, 0x09	; 9
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	default: return button_number;
    2eee:	29 81       	ldd	r18, Y+1	; 0x01
    2ef0:	2a 83       	std	Y+2, r18	; 0x02
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <KeyPad_getPressedKey+0x6>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2f0c:	1a 82       	std	Y+2, r1	; 0x02
    2f0e:	62 c0       	rjmp	.+196    	; 0x2fd4 <KeyPad_getPressedKey+0xd2>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00100000<<col);
    2f10:	e4 e3       	ldi	r30, 0x34	; 52
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	28 2f       	mov	r18, r24
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	80 e2       	ldi	r24, 0x20	; 32
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <KeyPad_getPressedKey+0x22>
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	2a 95       	dec	r18
    2f26:	e2 f7       	brpl	.-8      	; 0x2f20 <KeyPad_getPressedKey+0x1e>
    2f28:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00100000<<col));
    2f2a:	e5 e3       	ldi	r30, 0x35	; 53
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	80 e2       	ldi	r24, 0x20	; 32
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 2e       	mov	r0, r18
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <KeyPad_getPressedKey+0x3e>
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	0a 94       	dec	r0
    2f42:	e2 f7       	brpl	.-8      	; 0x2f3c <KeyPad_getPressedKey+0x3a>
    2f44:	80 95       	com	r24
    2f46:	80 83       	st	Z, r24

			for(row=2;row<5;row++) /* loop for rows */
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	3c c0       	rjmp	.+120    	; 0x2fc6 <KeyPad_getPressedKey+0xc4>
			{
				if(GetBit(KEYPAD_PORT_IN,row)==0) /* if the switch is press in this row */
    2f4e:	e3 e3       	ldi	r30, 0x33	; 51
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	88 2f       	mov	r24, r24
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	a9 01       	movw	r20, r18
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <KeyPad_getPressedKey+0x64>
    2f62:	55 95       	asr	r21
    2f64:	47 95       	ror	r20
    2f66:	8a 95       	dec	r24
    2f68:	e2 f7       	brpl	.-8      	; 0x2f62 <KeyPad_getPressedKey+0x60>
    2f6a:	ca 01       	movw	r24, r20
    2f6c:	81 70       	andi	r24, 0x01	; 1
    2f6e:	90 70       	andi	r25, 0x00	; 0
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	31 f5       	brne	.+76     	; 0x2fc0 <KeyPad_getPressedKey+0xbe>
				{
					while( GetBit(KEYPAD_PORT_IN,row)==0 );
    2f74:	e3 e3       	ldi	r30, 0x33	; 51
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	88 2f       	mov	r24, r24
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a9 01       	movw	r20, r18
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <KeyPad_getPressedKey+0x8a>
    2f88:	55 95       	asr	r21
    2f8a:	47 95       	ror	r20
    2f8c:	8a 95       	dec	r24
    2f8e:	e2 f7       	brpl	.-8      	; 0x2f88 <KeyPad_getPressedKey+0x86>
    2f90:	ca 01       	movw	r24, r20
    2f92:	81 70       	andi	r24, 0x01	; 1
    2f94:	90 70       	andi	r25, 0x00	; 0
    2f96:	00 97       	sbiw	r24, 0x00	; 0
    2f98:	69 f3       	breq	.-38     	; 0x2f74 <KeyPad_getPressedKey+0x72>

					return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	82 0f       	add	r24, r18
    2fa8:	93 1f       	adc	r25, r19
    2faa:	98 2f       	mov	r25, r24
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	89 0f       	add	r24, r25
    2fb0:	85 50       	subi	r24, 0x05	; 5
    2fb2:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <KeyPad_3x3_adjustKeyNumber>

				}
			}
		}
	}
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00100000<<col));

			for(row=2;row<5;row++) /* loop for rows */
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	8f 5f       	subi	r24, 0xFF	; 255
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	85 30       	cpi	r24, 0x05	; 5
    2fca:	08 f4       	brcc	.+2      	; 0x2fce <KeyPad_getPressedKey+0xcc>
    2fcc:	c0 cf       	rjmp	.-128    	; 0x2f4e <KeyPad_getPressedKey+0x4c>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	8f 5f       	subi	r24, 0xFF	; 255
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	83 30       	cpi	r24, 0x03	; 3
    2fd8:	08 f4       	brcc	.+2      	; 0x2fdc <KeyPad_getPressedKey+0xda>
    2fda:	9a cf       	rjmp	.-204    	; 0x2f10 <KeyPad_getPressedKey+0xe>
    2fdc:	97 cf       	rjmp	.-210    	; 0x2f0c <KeyPad_getPressedKey+0xa>

00002fde <__divmodsi4>:
    2fde:	97 fb       	bst	r25, 7
    2fe0:	09 2e       	mov	r0, r25
    2fe2:	05 26       	eor	r0, r21
    2fe4:	0e d0       	rcall	.+28     	; 0x3002 <__divmodsi4_neg1>
    2fe6:	57 fd       	sbrc	r21, 7
    2fe8:	04 d0       	rcall	.+8      	; 0x2ff2 <__divmodsi4_neg2>
    2fea:	14 d0       	rcall	.+40     	; 0x3014 <__udivmodsi4>
    2fec:	0a d0       	rcall	.+20     	; 0x3002 <__divmodsi4_neg1>
    2fee:	00 1c       	adc	r0, r0
    2ff0:	38 f4       	brcc	.+14     	; 0x3000 <__divmodsi4_exit>

00002ff2 <__divmodsi4_neg2>:
    2ff2:	50 95       	com	r21
    2ff4:	40 95       	com	r20
    2ff6:	30 95       	com	r19
    2ff8:	21 95       	neg	r18
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	4f 4f       	sbci	r20, 0xFF	; 255
    2ffe:	5f 4f       	sbci	r21, 0xFF	; 255

00003000 <__divmodsi4_exit>:
    3000:	08 95       	ret

00003002 <__divmodsi4_neg1>:
    3002:	f6 f7       	brtc	.-4      	; 0x3000 <__divmodsi4_exit>
    3004:	90 95       	com	r25
    3006:	80 95       	com	r24
    3008:	70 95       	com	r23
    300a:	61 95       	neg	r22
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	8f 4f       	sbci	r24, 0xFF	; 255
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	08 95       	ret

00003014 <__udivmodsi4>:
    3014:	a1 e2       	ldi	r26, 0x21	; 33
    3016:	1a 2e       	mov	r1, r26
    3018:	aa 1b       	sub	r26, r26
    301a:	bb 1b       	sub	r27, r27
    301c:	fd 01       	movw	r30, r26
    301e:	0d c0       	rjmp	.+26     	; 0x303a <__udivmodsi4_ep>

00003020 <__udivmodsi4_loop>:
    3020:	aa 1f       	adc	r26, r26
    3022:	bb 1f       	adc	r27, r27
    3024:	ee 1f       	adc	r30, r30
    3026:	ff 1f       	adc	r31, r31
    3028:	a2 17       	cp	r26, r18
    302a:	b3 07       	cpc	r27, r19
    302c:	e4 07       	cpc	r30, r20
    302e:	f5 07       	cpc	r31, r21
    3030:	20 f0       	brcs	.+8      	; 0x303a <__udivmodsi4_ep>
    3032:	a2 1b       	sub	r26, r18
    3034:	b3 0b       	sbc	r27, r19
    3036:	e4 0b       	sbc	r30, r20
    3038:	f5 0b       	sbc	r31, r21

0000303a <__udivmodsi4_ep>:
    303a:	66 1f       	adc	r22, r22
    303c:	77 1f       	adc	r23, r23
    303e:	88 1f       	adc	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	1a 94       	dec	r1
    3044:	69 f7       	brne	.-38     	; 0x3020 <__udivmodsi4_loop>
    3046:	60 95       	com	r22
    3048:	70 95       	com	r23
    304a:	80 95       	com	r24
    304c:	90 95       	com	r25
    304e:	9b 01       	movw	r18, r22
    3050:	ac 01       	movw	r20, r24
    3052:	bd 01       	movw	r22, r26
    3054:	cf 01       	movw	r24, r30
    3056:	08 95       	ret

00003058 <__prologue_saves__>:
    3058:	2f 92       	push	r2
    305a:	3f 92       	push	r3
    305c:	4f 92       	push	r4
    305e:	5f 92       	push	r5
    3060:	6f 92       	push	r6
    3062:	7f 92       	push	r7
    3064:	8f 92       	push	r8
    3066:	9f 92       	push	r9
    3068:	af 92       	push	r10
    306a:	bf 92       	push	r11
    306c:	cf 92       	push	r12
    306e:	df 92       	push	r13
    3070:	ef 92       	push	r14
    3072:	ff 92       	push	r15
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	ca 1b       	sub	r28, r26
    3082:	db 0b       	sbc	r29, r27
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	09 94       	ijmp

00003090 <__epilogue_restores__>:
    3090:	2a 88       	ldd	r2, Y+18	; 0x12
    3092:	39 88       	ldd	r3, Y+17	; 0x11
    3094:	48 88       	ldd	r4, Y+16	; 0x10
    3096:	5f 84       	ldd	r5, Y+15	; 0x0f
    3098:	6e 84       	ldd	r6, Y+14	; 0x0e
    309a:	7d 84       	ldd	r7, Y+13	; 0x0d
    309c:	8c 84       	ldd	r8, Y+12	; 0x0c
    309e:	9b 84       	ldd	r9, Y+11	; 0x0b
    30a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30a2:	b9 84       	ldd	r11, Y+9	; 0x09
    30a4:	c8 84       	ldd	r12, Y+8	; 0x08
    30a6:	df 80       	ldd	r13, Y+7	; 0x07
    30a8:	ee 80       	ldd	r14, Y+6	; 0x06
    30aa:	fd 80       	ldd	r15, Y+5	; 0x05
    30ac:	0c 81       	ldd	r16, Y+4	; 0x04
    30ae:	1b 81       	ldd	r17, Y+3	; 0x03
    30b0:	aa 81       	ldd	r26, Y+2	; 0x02
    30b2:	b9 81       	ldd	r27, Y+1	; 0x01
    30b4:	ce 0f       	add	r28, r30
    30b6:	d1 1d       	adc	r29, r1
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	ed 01       	movw	r28, r26
    30c4:	08 95       	ret

000030c6 <_exit>:
    30c6:	f8 94       	cli

000030c8 <__stop_program>:
    30c8:	ff cf       	rjmp	.-2      	; 0x30c8 <__stop_program>
